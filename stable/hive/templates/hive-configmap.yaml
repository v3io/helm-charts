apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  labels:
    app: {{ template "hive.name" . }}
    chart: {{ template "hive.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  v3io-hive-initdb-mysql.sh: |
    #!/usr/bin/env bash
    set -e
    echo "About to initialize hive metastore database. (Note, running as $(whoami))"
    mysql -h{{ .Values.metastore.database.hostname }} -u{{ .Values.createHiveUserMariaDbImage.user }} -p${HIVE_METASTORE_ADMIN_PASSWORD} < {{ .Values.hive.configPath }}/create-hive-user.sql
    echo "Done."

  create-hive-user.sql: |
    CREATE DATABASE IF NOT EXISTS {{ .Values.metastore.database.name }};
    CREATE USER IF NOT EXISTS '{{ .Values.metastore.database.username }}'@'{{ .Values.metastore.database.remoteAccessHost }}' IDENTIFIED BY '{{ .Values.metastore.database.password }}';

    REVOKE ALL PRIVILEGES, GRANT OPTION FROM '{{ .Values.metastore.database.username }}'@'{{ .Values.metastore.database.remoteAccessHost }}';
    GRANT ALL PRIVILEGES ON {{ .Values.metastore.database.name }}.* TO '{{ .Values.metastore.database.username }}'@'{{ .Values.metastore.database.remoteAccessHost }}';
    FLUSH PRIVILEGES;

  create-hive-schema.sh: |
    #!/usr/bin/env bash
    set -e

    cp {{ .Values.hive.configPath }}/hive-site.xml $HIVE_CONF_DIR/

    echo "About to create hive metastore schema. (Note, running as $(whoami))"

    # Initialize Hive metastore database
    # Check if schema does not exists or invalid, then try to initialize Hive metastore database schema
    set +e
    schematool -dbType $HIVE_DB_TYPE -validate
    RC=$?
    set -e
    if [ $RC != 0 ]; then
      echo "Hive schema didn't pass validation. RC=$RC"
      echo "Initializing Hive metastore schema..."
      schematool -initSchema -dbType $HIVE_DB_TYPE
      RC=$?
      if [ $RC != 0 ]; then
        echo "Failed to initialize Hive metastore database schema. RC=$RC"
        exit $RC
      else
        echo "Hive metastore schema initialized successfully."
      fi
    else
      echo "Hive metastore schema already exists. Details:"
      schematool -dbType $HIVE_DB_TYPE -info
    fi
    curl -i -X PUT {{ .Values.v3io.api.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.v3io.api.port }}{{ .Values.hive.defaultFolder }} -H X-v3io-session-key:{{ .Values.v3io.accessKey }}
  health_check.sh: |
{{ include "v3io-configs.script.javaHealthCheck" . | indent 4 }}

    # Check if service is listening on the specified protocol and port
    PROTOCOL="tcp"
    HOST="127.0.0.1"
    SOCKET_PORT={{ .Values.metastore.containerPort }}

    for i in "$@"
    do
    case $i in
        -t=*|--type=*)
        PROTOCOL="${i#*=}"
        ;;
        -h=*|--host=*)
        HOST="${i#*=}"
        ;;
        -p=*|--socket-port=*)
        SOCKET_PORT="${i#*=}"
        ;;
    esac
    done

    RC=echo < /dev/$PROTOCOL/$HOST/$SOCKET_PORT
    if [ "$RC" -ne "0" ]; then
      echo "Unable to communicate with [$HOST:$SOCKET_PORT] over [$PROTOCOL]. RC=$RC"
      exit $RC
    fi
    CONFIGURED_V3IOD=$(grep "socket.host" $IGZ_DATA_CONFIG_FILE | cut -f2 -d"=")
    if [ "${CONFIGURED_V3IOD}" != "CURRENT_NODE_IP" ]; then
      /var/run/iguazio/daemon_health/healthz --host ${CONFIGURED_V3IOD}
    fi

  daemon-health.sh: |
    #!/usr/bin/env bash

    cp /usr/local/bin/healthz /var/run/iguazio/daemon_health/healthz

  v3io-hive.sh: |
    #!/usr/bin/env bash
    set -e

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    cp {{ .Values.hive.configPath }}/hive-site.xml $HIVE_CONF_DIR/

    sed -i "s/property.hive.log.level = INFO/property.hive.log.level = {{ .Values.hive.logLevel }}/g" $HIVE_CONF_DIR/hive-log4j2.properties
    sed -i "s/property.hive.root.logger = DRFA/property.hive.root.logger = console/g" $HIVE_CONF_DIR/hive-log4j2.properties
    sed -i "s/property.hive.log.level = INFO/property.hive.log.level = {{ .Values.hive.logLevel }}/g" $HIVE_CONF_DIR/hive-exec-log4j2.properties
    sed -i "s/property.hive.root.logger = DRFA/property.hive.root.logger = console/g" $HIVE_CONF_DIR/hive-exec-log4j2.properties

    echo Starting hive metastore service....
    hive --service metastore

  hive-site.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
{{ if eq .Values.metastore.database.type "postgresql" }}
      <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>jdbc:postgresql://{{ .Values.metastore.database.hostname }}:{{ .Values.metastore.database.port }}/{{ .Values.metastore.database.name }}</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>org.postgresql.Driver</value>
      </property>
{{ else }}
      <property>
        <name>javax.jdo.option.ConnectionURL</name>
        <value>jdbc:mysql://{{ .Values.metastore.database.hostname }}:{{ .Values.metastore.database.port }}/{{ .Values.metastore.database.name }}</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionDriverName</name>
        <value>org.mariadb.jdbc.Driver</value>
      </property>
{{ end }}

      # CVE-2021-44228
      <property>
        <name>log4j2.formatMsgNoLookups</name>
        <value>true</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionUserName</name>
        <value>{{ .Values.metastore.database.username }}</value>
      </property>

      <property>
        <name>javax.jdo.option.ConnectionPassword</name>
        <value>{{ .Values.metastore.database.password }}</value>
      </property>

      <property>
        <name>hive.metastore.uris</name>
        <value>thrift://{{ template "hive.fullname" . }}:{{ .Values.metastore.containerPort }}</value>
        <description>IP address (or fully-qualified domain name) and port of the metastore host</description>
      </property>

      <property>
        <name>hive.metastore.schema.verification</name>
        <value>true</value>
      </property>
    </configuration>
