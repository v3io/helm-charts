apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "shell.fullname" . }}
  labels:
    app: {{ template "shell.name" . }}
    chart: {{ template "shell.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  health_check.sh: |
{{ include "v3io-configs.script.javaHealthCheck" . | indent 4 }}
{{ include "v3io-configs.script.v3ioDaemonHealthCheck" . | indent 4 }}

  daemon-health.sh: |
    #!/usr/bin/env bash

    cp /usr/local/bin/healthz /var/run/iguazio/daemon_health/healthz

{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
  create-cert.sh: |
    #!/bin/bash

    set -e

    echo -n "{{ .Values.presto.keystoreBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.jks
{{- end }}
{{- end }}

  v3io-shell.sh: |
    #!/usr/bin/env bash
    set -e

    ## log + timer
    start=${SECONDS}
    log () {
      echo [$(( SECONDS - start ))s] "$*"
    }

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    ## Reset .bashrc on revision update
    BASHRC_REV=1
    if ! $(grep -q IGZ_BASHRC_REV_${BASHRC_REV} ${HOME}/.bashrc 2>/dev/null); then
      log 'Reset .bashrc on revision update'
      echo "#IGZ_BASHRC_REV_${BASHRC_REV}" > ${HOME}/.bashrc
    fi


    ## Kubectl autocompletion
    if [ "$(grep --count 'KUBECTL AUTOCOMPLETION' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure kubectl autocompletion'
      cat << EOF >> ${HOME}/.bashrc
    # ----- KUBECTL AUTOCOMPLETION -----
    if [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
    fi
    if type -t _get_comp_words_by_ref > /dev/null 2>&1 && command -v kubectl > /dev/null 2>&1; then
      source <(kubectl completion bash)
    fi
    # ----- END KUBECTL AUTOCOMPLETION -----

    EOF
    fi


    ## Create v3io symlink
    if [ ! -e "${HOME}/v3io" ]; then
      ln -s /v3io ${HOME}
    fi


    ## Create conda env dir (fuse), populate .condarc and init
    if [ ! -d "${HOME}/.conda/envs" ]; then
      log 'Configure conda'
      mkdir -p ${HOME}/.conda/envs
    fi
    if [ ! -e "${HOME}/.condarc" ]; then
      cp /conda/.condarc ${HOME}/
    fi
    # prevent .condarc duplicates
    rm -f /conda/.condarc
    # conda init
    if [ "$(grep --count '>>> conda initialize >>>' ${HOME}/.bashrc)" == "0" ]; then
      conda init bash 2>&1
    fi


    # IG-9854
    if [ "$(grep --count Slf4jLogger /hadoop/etc/hadoop/log4j.properties)" == "0" ]; then
      echo log4j.logger.vendor.akka.event.slf_4j.Slf4jLogger=WARN >> /hadoop/etc/hadoop/log4j.properties
    fi


    # Create /tmp in default container if not exists and set premissions to 777 (See: IG-11583)
    hadoop fs -test -e {{ .Values.hive.scratchDirPrefix }} || hadoop fs -mkdir {{ .Values.hive.scratchDirPrefix }}
    hadoop fs -chmod 777 {{ .Values.hive.scratchDirPrefix }}


    ## Spark
{{- if .Values.spark }}
    log 'Configure spark'
    cat << EOF >> ${SPARK_HOME}/conf/spark-defaults.conf
    spark.master=spark://{{ .Values.spark.hostname }}:{{ .Values.spark.port }}
    spark.driver.host=$(hostname -i)
    spark.executor.cores={{ .Values.spark.executorCores }}
    spark.executor.memory={{ .Values.spark.executorMemory }}
    spark.cores.max={{ .Values.spark.maxApplicationCores }}
    spark.sql.catalogImplementation=in-memory
    EOF
    for arg in V3IO_USERNAME V3IO_PASSWORD V3IO_TENANT V3IO_ACCESS_KEY; do
      if [ "${!arg}" != "" ]; then
        echo "spark.executorEnv.${arg}=${!arg}" >> ${SPARK_HOME}/conf/spark-defaults.conf
      fi
    done
{{- end }}
    # add iguazio spark pythonpath
    export PYTHONPATH=$IGZ_SPARK_PYTHONPATH


    ## Presto
{{- if .Values.presto }}
    log 'Configure presto'
    rm -rf ${IGUAZIO_HOME}/.presto_alias
    touch ${IGUAZIO_HOME}/.trino_history
{{- if .Values.presto.keystoreBinary }}
      cat << EOF > ${IGUAZIO_HOME}/.presto_alias
    alias prestojks="TRINO_PASSWORD=$V3IO_ACCESS_KEY presto-cli --truststore-path {{ .Values.presto.secretsMountPath }}/tls.jks --truststore-password {{ .Values.presto.passphrase }} --user \$V3IO_USERNAME --password \$@"
    alias trinojks="prestojks \$@"
    alias prestow="prestojks --server https://{{ .Values.presto.hostname }} \$@"
    alias trinow="prestow \$@"
    EOF
{{- else  }}
      cat << EOF > ${IGUAZIO_HOME}/.presto_alias
    alias prestow="presto-cli --server http://{{ .Values.presto.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.presto.port }} \$@"
    alias trinow="prestow \$@"
    EOF
{{- end }}
    cat << EOF >> ${IGUAZIO_HOME}/.presto_alias
    alias presto="prestow --catalog={{ .Values.presto.catalog }} \$@"
    alias trino="presto \$@"
    EOF
    if [ "$(grep --count 'PRESTO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      cat << EOF >> ${HOME}/.bashrc
    # ----- PRESTO CONFIG -----
    [ -e ${IGUAZIO_HOME}/.presto_alias ] && source ${IGUAZIO_HOME}/.presto_alias
    # --- END PRESTO CONFIG ---

    EOF
    fi
{{- end }}


    ## Hive
{{- if .Values.hive }}
    log 'Configure hive'
    echo alias hive=\"JAVA_HOME=${IGUAZIO_HOME}/jdk-8u181 ${HIVE_HOME}/bin/hive -hiveconf hive.exec.scratchdir={{ .Values.hive.scratchDirPrefix }}/${V3IO_USERNAME}/hive -hiveconf hive.metastore.uris=thrift://{{ .Values.hive.metastore.hostname }}:{{ .Values.hive.metastore.port }} \$@\" >> ${IGUAZIO_HOME}/.hive_alias
    if [ "$(grep --count 'HIVE CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      cat << EOF >> ${HOME}/.bashrc
    # ----- HIVE CONFIG -----
    test -e ${IGUAZIO_HOME}/.hive_alias && source ${IGUAZIO_HOME}/.hive_alias
    # --- END HIVE CONFIG ---

    EOF
    fi
{{- end }}


    ## Download extra binaries
{{- if and .Values.v3io.downloadBinaries }}
    log 'Download extra binaries'
{{- range $binary, $url := .Values.v3io.downloadBinaries }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/{{ $binary }} {{ $url }}
    chmod +x ${IGUAZIO_HOME}/bin/{{ $binary }}
{{ end -}}
{{- end }}


    ## TSDB
{{- if and .Values.v3io.tsdbctl .Values.v3io.tsdbctl.download }}
    log 'Configure TSDB'
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/tsdbctl {{ .Values.v3io.tsdbctl.download }}
    chmod +x ${IGUAZIO_HOME}/bin/tsdbctl
    rm -f ${IGUAZIO_HOME}/.tsdb_alias
    if [ "${V3IO_API}" -a "${V3IO_ACCESS_KEY}" ]; then
      echo alias tsdbctl=\"tsdbctl --server ${V3IO_API} --access-key ${V3IO_ACCESS_KEY}\" >> ${IGUAZIO_HOME}/.tsdb_alias
      if [ "$(grep --count 'TSDB CONFIG' ${HOME}/.bashrc)" == "0" ]; then
        cat << EOF >> ${HOME}/.bashrc
    # ----- TSDB CONFIG -----
    test -e ${IGUAZIO_HOME}/.tsdb_alias && source ${IGUAZIO_HOME}/.tsdb_alias
    # --- END TSDB CONFIG ---

    EOF
      fi
    fi
{{- end }}


    ## Iguazio terminal logo
{{- if .Values.config.logo }}
    if [ "$(grep --count 'LOGO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure iguazio logo'
      echo "# ----- LOGO CONFIG -----" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "printf '\033[?7l'" >> ${HOME}/.bashrc
      echo "echo {{ .Values.config.logo }} | base64 --decode" >> ${HOME}/.bashrc
      echo "printf '\033[?7h'" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "# --- END LOGO CONFIG ---" >> ${HOME}/.bashrc
      echo "" >> ${HOME}/.bashrc
    fi
{{- end }}


    ## Prompt config
    if [ "$(grep --count 'IGUAZIO PROMPT CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure prompt'
      cp ${CONDA_HOME}/.bash_prompt.sh ${HOME}
      cat << EOF >> ${HOME}/.bashrc
    # ----- IGUAZIO PROMPT CONFIG -----
    alias ll="ls -lah --color"
    source ${HOME}/.bash_prompt.sh
    # --- END IGUAZIO PROMPT CONFIG ---

    EOF
    fi


    ## SSH config
{{- if .Values.sshServer.enabled }}
    log 'Configure SSH'
    cp /var/run/iguazio/secrets/ssh/* ${IGUAZIO_HOME}/.ssh
    cat << EOF >> /etc/ssh/sshd_config
    PasswordAuthentication no
    PermitRootLogin no
    Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
    EOF
    /usr/sbin/sshd -f /etc/ssh/sshd_config
    # fix ssh env (ssh default home is /igz)
    env | awk -F"=" '{printf("export %s=\"%s\"\n",$1,$2)}' > /igz/.ssh_environment
    cat << EOF > /igz/.profile
    source /igz/.ssh_environment
    cd ${HOME}
    source ${HOME}/.bashrc
    EOF
{{- end }}
    echo "source ${HOME}/.bashrc" > ${HOME}/.bash_profile


    ## Vim config
    log 'Configure vim'
    touch ${HOME}/.viminfo
    chmod a+w ${HOME}/.viminfo
    # Remove term= line from .vimrc - setting causes some keys (for ex. del) not to work
    if [ -e "${HOME}/.vimrc" ]; then
      sed -i '/:set term=builtin_ansi/d' ${HOME}/.vimrc
    fi


    ## Git config
    log 'Configure git'
    # Prevent git from failing on fuse mount (not owned by iguazio user)
    # https://stackoverflow.com/questions/72978485/ubuntu-20-04-git-submodule-update-failed-with-fatal-detected-dubious-ownershi
    if [ "$(git config --global --get safe.directory)" == "" ]; then
      git config --global --add safe.directory '*'
    fi
    # Store credentials in cache for multi pushing
    if [ "$(git config --global --get credential.helper)" == "" ]; then
      git config --global --add credential.helper store
    fi


    ## Block conda/pip installs on prebaked conda envs
    # https://github.com/conda/conda/issues/7791
    if [ "$(grep --count 'BLOCK INSTALL ON CONDA BASE' ${HOME}/.bashrc)" == "0" ]; then
      log 'Block conda, pip on prebaked envs'
      cat << EOF >> ${HOME}/.bashrc
    # ----- BLOCK INSTALL ON CONDA BASE -----
    function pip(){
      if [ "\$1" = "install" ]; then
        if [ "\${CONDA_DEFAULT_ENV-}" = "base" ]; then
          echo "Error: PIP installations to the conda (base) environment are not persistent."
          echo "       Please activate a different conda environment or create a new one."
          return 1
        fi
        for arg in "\$@"
        do
            if [[ "\$arg" == "--user" ]]; then
                echo "Error: The --user flag cannot be used when installing packages inside a conda environment."
                echo "       Please use 'pip install' without the --user flag instead."
                return 1
            fi
        done        
      fi
      command pip "\$@"
    }
    
    function extended_conda(){
      if [ "\${CONDA_DEFAULT_ENV-}" = "base" ] && [ "\$1" = "install" ]; then
        echo "Error: Conda installations to the (base) environment are not persistent."
        echo "       Please activate a different conda environment or create a new one."
        return 1
      fi
      if [[ \${CONDA_DEFAULT_ENV-} =~ jupyter|mlrun-base|mlrun-extended ]] && [ "\$1" = "install" ]; then
        echo "Error: Conda installations to the (\${CONDA_DEFAULT_ENV}) environment are not persistent."
        echo "       Please use PIP for persistent installations or create/activate another conda environment."
        return 1
      fi
      conda "\$@"
    }
    alias conda=extended_conda
    # ----- END BLOCK INSTALL ON CONDA BASE -----

    EOF
    fi


    ## Create bashrc for non-interactive SSH logins
    if [ ! -e "${HOME}/.bashrc-noninteractive" ]; then
      log 'Configure non-interactive bashrc'
      cat << EOF > ${HOME}/.bashrc-noninteractive
    # bashrc for non-interactive SSH logins
    EOF
    fi


    ## Disable pip user (local) installations
    export PYTHONNOUSERSITE=1


    ## Start ttyd
    log 'Starting ttyd'
    source activate base
    ttyd bash
