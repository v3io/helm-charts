apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "shell.fullname" . }}
  labels:
    app: {{ template "shell.name" . }}
    chart: {{ template "shell.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  health_check.sh: |
{{ include "v3io-configs.script.javaHealthCheck" . | indent 4 }}
{{ include "v3io-configs.script.v3ioDaemonHealthCheck" . | indent 4 }}

  daemon-health.sh: |
    #!/usr/bin/env bash

    cp /usr/local/bin/healthz /var/run/iguazio/daemon_health/healthz

{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
  create-cert.sh: |
    #!/bin/bash

    set -e

    echo -n "{{ .Values.presto.keystoreBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.jks
{{- end }}
{{- end }}

  v3io-shell.sh: |
    #!/usr/bin/env bash
    set -e

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    # reset .bashrc on revision update
    if ! $(grep -q IGZ_BASHRC_REV_1 ${HOME}/.bashrc); then
      echo -e '#IGZ_BASHRC_REV_1\n' > ${HOME}/.bashrc
    fi
    
{{- if and .Values.v3io.downloadBinaries }}
{{- range $binary, $url := .Values.v3io.downloadBinaries }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/{{ $binary }} {{ $url }}
    chmod +x ${IGUAZIO_HOME}/bin/{{ $binary }}
{{ end -}}
{{- end }}
{{- if and .Values.v3io.tsdbctl .Values.v3io.tsdbctl.download }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/tsdbctl {{ .Values.v3io.tsdbctl.download }}
    chmod +x ${IGUAZIO_HOME}/bin/tsdbctl
    rm -f ${IGUAZIO_HOME}/.tsdb_alias
    if [ "${V3IO_API}" -a "${V3IO_ACCESS_KEY}" ]; then
      echo alias tsdbctl=\"tsdbctl --server ${V3IO_API} --access-key ${V3IO_ACCESS_KEY}\" >> ${IGUAZIO_HOME}/.tsdb_alias
      if [ "$(grep --count 'TSDB CONFIG' ${HOME}/.bashrc)" == "0" ]; then
        echo "# ----- TSDB CONFIG -----" >> ${HOME}/.bashrc
        echo "test -e ${IGUAZIO_HOME}/.tsdb_alias && source ${IGUAZIO_HOME}/.tsdb_alias" >> ${HOME}/.bashrc
        echo "# --- END TSDB CONFIG ---" >> ${HOME}/.bashrc
      fi
    fi
{{- end }}

    # IG-9854
    if [ "$(grep --count Slf4jLogger /hadoop/etc/hadoop/log4j.properties)" == "0" ]; then
        echo >> /hadoop/etc/hadoop/log4j.properties
        echo log4j.logger.vendor.akka.event.slf_4j.Slf4jLogger=WARN >> /hadoop/etc/hadoop/log4j.properties
    fi

    # Create /tmp in default container if not exists and set premissions to 777 (See: IG-11583)
    hadoop fs -test -e {{ .Values.hive.scratchDirPrefix }} || hadoop fs -mkdir {{ .Values.hive.scratchDirPrefix }}
    hadoop fs -chmod 777 {{ .Values.hive.scratchDirPrefix }}

{{- if .Values.spark }}
    echo "spark.master=spark://{{ .Values.spark.hostname }}:{{ .Values.spark.port }}" >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.driver.host=$(hostname -i) >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.executor.cores={{ .Values.spark.executorCores }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.executor.memory={{ .Values.spark.executorMemory }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.cores.max={{ .Values.spark.maxApplicationCores }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.sql.catalogImplementation=in-memory >> ${SPARK_HOME}/conf/spark-defaults.conf
    for arg in V3IO_USERNAME V3IO_PASSWORD V3IO_TENANT V3IO_ACCESS_KEY; do
      if [ "${!arg}" != "" ]; then
        echo spark.executorEnv.${arg}=${!arg} >> ${SPARK_HOME}/conf/spark-defaults.conf
      fi
    done
{{- end }}

{{- if .Values.presto }}
    rm -rf ${IGUAZIO_HOME}/.presto_alias
    touch ${IGUAZIO_HOME}/.trino_history
{{- if .Values.presto.keystoreBinary }}
    echo alias prestojks=\"TRINO_PASSWORD=$V3IO_ACCESS_KEY presto-cli --truststore-path {{ .Values.presto.secretsMountPath }}/tls.jks --truststore-password {{ .Values.presto.passphrase }} --user $V3IO_USERNAME --password \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias trinojks=\"prestojks \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias prestow=\"prestojks --server https://{{ .Values.presto.hostname }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias trinow=\"prestow \$@\" >> ${IGUAZIO_HOME}/.presto_alias
{{- else  }}
    echo alias prestow=\"presto-cli --server http://{{ .Values.presto.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.presto.port }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias trinow=\"prestow \$@\" >> ${IGUAZIO_HOME}/.presto_alias
{{- end }}
    echo alias presto=\"prestow --catalog={{ .Values.presto.catalog }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias trino=\"presto \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    if [ "$(grep --count 'PRESTO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- PRESTO CONFIG -----" >> ${HOME}/.bashrc
      echo "source ${IGUAZIO_HOME}/.presto_alias" >> ${HOME}/.bashrc
      echo "# --- END PRESTO CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

{{- if .Values.hive }}
    echo alias hive=\"JAVA_HOME=${IGUAZIO_HOME}/jdk-8u181 ${HIVE_HOME}/bin/hive -hiveconf hive.exec.scratchdir={{ .Values.hive.scratchDirPrefix }}/${V3IO_USERNAME}/hive -hiveconf hive.metastore.uris=thrift://{{ .Values.hive.metastore.hostname }}:{{ .Values.hive.metastore.port }} \$@\" >> ${IGUAZIO_HOME}/.hive_alias
    if [ "$(grep --count 'HIVE CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- HIVE CONFIG -----" >> ${HOME}/.bashrc
      echo "test -e ${IGUAZIO_HOME}/.hive_alias" && echo "source ${IGUAZIO_HOME}/.hive_alias" >> ${HOME}/.bashrc
      echo "# --- END HIVE CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

{{- if .Values.config.logo }}
    if [ "$(grep --count 'LOGO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- LOGO CONFIG -----" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "printf '\033[?7l'" >> ${HOME}/.bashrc
      echo "echo {{ .Values.config.logo }} | base64 --decode" >> ${HOME}/.bashrc
      echo "printf '\033[?7h'" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "# --- END LOGO CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

{{- if .Values.config.welcome }}
    if [ "$(grep --count 'WELCOME CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- WELCOME CONFIG -----" >> ${HOME}/.bashrc
      echo "toilet --font smmono9 --termwidth --filter metal {{ .Values.config.welcome }}" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "# ----- WELCOME CONFIG -----" >> ${HOME}/.bashrc
    fi
{{- end }}

    if [ "$(grep --count 'IGUAZIO PROMPT CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      cp ${CONDA_HOME}/.bash_prompt.sh ${HOME}
      echo "# ----- IGUAZIO PROMPT CONFIG -----" >> ${HOME}/.bashrc
      echo alias ll=\"ls -lah --color\" >> ${HOME}/.bashrc
      echo "source ${HOME}/.bash_prompt.sh" >> ${HOME}/.bashrc
      echo "# --- END IGUAZIO PROMPT CONFIG ---" >> ${HOME}/.bashrc
    fi

    if [ "$(grep --count 'KUBECTL AUTOCOMPLETION' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- KUBECTL AUTOCOMPLETION -----" >> ${HOME}/.bashrc
      echo "if [ -f /etc/bash_completion ]; then" >> ${HOME}/.bashrc
      echo " . /etc/bash_completion" >> ${HOME}/.bashrc
      echo "fi" >> ${HOME}/.bashrc
      echo "if type -t _get_comp_words_by_ref > /dev/null 2>&1 && command -v kubectl > /dev/null 2>&1; then" >> ${HOME}/.bashrc
      echo " source <(kubectl completion bash)" >> ${HOME}/.bashrc
      echo "fi" >> ${HOME}/.bashrc
      echo "# ----- END KUBECTL AUTOCOMPLETION -----" >> ${HOME}/.bashrc
    fi

    # populate .condarc, create conda env dir (fuse) and init
    if [ ! -e "${HOME}/.condarc" ]; then
      cp /conda/.condarc ${HOME}/
    fi
    if [ ! -d "${HOME}/.conda/envs" ]; then 
      mkdir -p ${HOME}/.conda/envs
    fi
    if [ "$(grep --count '>>> conda initialize >>>' ${HOME}/.bashrc)" == "0" ]; then
      conda init bash 2>&1
    fi

    echo "source ${HOME}/.bashrc" > ${HOME}/.bash_profile

    touch ${HOME}/.viminfo
    chmod a+w ${HOME}/.viminfo

    # Remove term= line from .vimrc - setting causes some keys (for ex. del) not to work
    if [ -e "${HOME}/.vimrc" ]; then
      sed -i '/:set term=builtin_ansi/d' ${HOME}/.vimrc
    fi

    # disable pip user (local) installations
    export PYTHONNOUSERSITE=False

    # Prevent git from failing on fuse mount (not owned by iguazio user)
    # https://stackoverflow.com/questions/72978485/ubuntu-20-04-git-submodule-update-failed-with-fatal-detected-dubious-ownershi
    if [ "$(git config --global --get safe.directory)" != "*" ]; then
      git config --global --add safe.directory '*'
    fi    

    # https://github.com/conda/conda/issues/7791
    if [ "$(grep --count 'BLOCK INSTALL ON CONDA BASE' ${HOME}/.bashrc)" == "0" ]; then
      echo '# ----- BLOCK INSTALL ON CONDA BASE -----' >> ${HOME}/.bashrc
      echo 'function pip(){' >> ${HOME}/.bashrc
      echo '  if [ "${CONDA_DEFAULT_ENV-}" = "base" ] && [ "$1" = "install" ]; then' >> ${HOME}/.bashrc
      echo '    echo "Not allowed in conda (base) environment where package updates are not persistent."' >> ${HOME}/.bashrc
      echo '    echo "Please create or activate another conda environment."' >> ${HOME}/.bashrc
      echo '  else' >> ${HOME}/.bashrc
      echo '    command pip "$@"' >> ${HOME}/.bashrc
      echo '  fi' >> ${HOME}/.bashrc
      echo '}' >> ${HOME}/.bashrc
      echo '' >> ${HOME}/.bashrc
      echo 'function extended_conda(){' >> ${HOME}/.bashrc
      echo '  if [ "${CONDA_DEFAULT_ENV-}" = "base" ] && [ "$1" = "install" ]; then' >> ${HOME}/.bashrc
      echo '    echo "Not allowed in conda (base) environment where package updates are not persistent."' >> ${HOME}/.bashrc
      echo '    echo "Please create or activate another conda environment."' >> ${HOME}/.bashrc
      echo '  elif [[ ${CONDA_DEFAULT_ENV-} =~ jupyter|mlrun-base|mlrun-extended ]] && [ "$1" = "install" ]; then' >> ${HOME}/.bashrc
      echo '    echo "Conda installs to (${CONDA_DEFAULT_ENV}) environment are not persistent."' >> ${HOME}/.bashrc
      echo '    echo "Either use PIP which is persistent or create/activate another conda environment."' >> ${HOME}/.bashrc      
      echo '  else' >> ${HOME}/.bashrc
      echo '    conda "$@"' >> ${HOME}/.bashrc
      echo '  fi' >> ${HOME}/.bashrc
      echo '}' >> ${HOME}/.bashrc
      echo 'alias conda=extended_conda' >> ${HOME}/.bashrc
      echo '# ----- END BLOCK INSTALL ON CONDA BASE -----' >> ${HOME}/.bashrc
    fi

{{- if .Values.sshServer.enabled }}
    cp /var/run/iguazio/secrets/ssh/* ${IGUAZIO_HOME}/.ssh

    echo -e "PasswordAuthentication no
    PermitRootLogin no
    Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com" >> /etc/ssh/sshd_config

    /usr/sbin/sshd -f /etc/ssh/sshd_config
{{- end }}

    # fix ssh env (ssh default home is /igz)
    if [ ! -e "${HOME}/.ssh_environment" ]; then
      echo "source ${HOME}/.ssh_environment" > /igz/.profile
      echo "cd ${HOME}" > /igz/.profile
      echo "source ${HOME}/.bashrc" >> /igz/.profile
    fi
    env | awk -F"=" '{printf("export %s=\"%s\"\n",$1,$2)}' > ${HOME}/.ssh_environment

    source activate base
    ttyd bash
