kind: ConfigMap
apiVersion: v1
metadata:
  name: hub-config
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
data:
  {{- /* Cull */}}
  {{- if .Values.cull.enabled }}
  cull.enabled: "true"
  cull.users: {{ .Values.cull.users | quote }}
  cull.timeout: {{ .Values.cull.timeout | quote }}
  cull.every: {{ .Values.cull.every | quote }}
  cull.concurrency: {{ .Values.cull.concurrency | quote }}
  cull.max-age: {{ .Values.cull.maxAge | quote }}
  {{- end }}


  {{- /* Auth */}}
  auth.type: {{ .Values.auth.type | quote }}
  auth.state.enabled: {{ .Values.auth.state.enabled | quote }}
  auth.admin.access: {{ .Values.auth.admin.access | quote }}
  {{- if .Values.auth.admin.users }}
  auth.admin.users: |
    {{- .Values.auth.admin.users | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}
  {{- if .Values.auth.whitelist.users }}
  auth.whitelist.users: |
    {{- .Values.auth.whitelist.users | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}
  {{- if .Values.auth.scopes }}
  auth.scopes: |
    {{- .Values.auth.scopes | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}


  {{- /* Auth.Provider */}}
  {{- if eq .Values.auth.type "hmac" }}
  auth.hmac.secret-key: {{ .Values.auth.hmac.secretKey | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "google" }}
  auth.google.client-id: {{ .Values.auth.google.clientId | quote }}
  auth.google.client-secret: {{ .Values.auth.google.clientSecret | quote }}
  auth.google.hosted-domain: {{ .Values.auth.google.hostedDomain | quote }}
  auth.google.login-service: {{ .Values.auth.google.loginService | quote }}
  auth.google.callback-url: {{ .Values.auth.google.callbackUrl | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "github" }}
  auth.github.client-id: {{ .Values.auth.github.clientId | quote }}
  auth.github.client-secret: {{ .Values.auth.github.clientSecret | quote }}
  auth.github.callback-url: {{ .Values.auth.github.callbackUrl | quote }}
  {{- if .Values.auth.github.org_whitelist }}
  auth.github.org_whitelist: |
    {{- .Values.auth.github.org_whitelist | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}
  {{- end }}

  {{- if eq .Values.auth.type "cilogon" }}
  auth.cilogon.client-id: {{ .Values.auth.cilogon.clientId | quote }}
  auth.cilogon.client-secret: {{ .Values.auth.cilogon.clientSecret | quote }}
  auth.cilogon.callback-url: {{ .Values.auth.cilogon.callbackUrl | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "gitlab" }}
  auth.gitlab.client-id: {{ .Values.auth.gitlab.clientId | quote }}
  auth.gitlab.client-secret: {{ .Values.auth.gitlab.clientSecret | quote }}
  auth.gitlab.callback-url: {{ .Values.auth.gitlab.callbackUrl | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "mediawiki" }}
  auth.mediawiki.client-id: {{ .Values.auth.mediawiki.clientId | quote }}
  auth.mediawiki.client-secret: {{ .Values.auth.mediawiki.clientSecret | quote }}
  auth.mediawiki.index-url: {{ .Values.auth.mediawiki.indexUrl | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "globus" }}
  auth.globus.client-id: {{ .Values.auth.globus.clientId | quote }}
  auth.globus.client-secret: {{ .Values.auth.globus.clientSecret | quote }}
  auth.globus.callback-url: {{ .Values.auth.globus.callbackUrl | quote }}
  auth.globus.identity-provider: {{ .Values.auth.globus.identityProvider | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "lti" }}
  auth.lti.consumers: |
    {{- .Values.auth.lti.consumers | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}

  {{- if eq .Values.auth.type "ldap" }}
  auth.ldap.server.address: {{ .Values.auth.ldap.server.address | quote }}
  auth.ldap.server.port: {{ .Values.auth.ldap.server.port | quote }}
  auth.ldap.server.ssl: {{ .Values.auth.ldap.server.ssl | quote }}
  {{- if .Values.auth.ldap.allowedGroups }}
  auth.ldap.allowed-groups: |
    {{- .Values.auth.ldap.allowedGroups | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}
  {{- if .Values.auth.ldap.dn.templates }}
  auth.ldap.dn.templates: |
    {{- .Values.auth.ldap.dn.templates | toYaml | trimSuffix "\n" | nindent 4 }}
  {{- end }}
  auth.ldap.dn.lookup: {{ .Values.auth.ldap.dn.lookup | quote }}
  auth.ldap.dn.search.filter: {{ .Values.auth.ldap.dn.search.filter | quote }}
  auth.ldap.dn.search.user: {{ .Values.auth.ldap.dn.search.user | quote }}
  auth.ldap.dn.search.password: {{ .Values.auth.ldap.dn.search.password | quote }}
  auth.ldap.dn.user.dn-attribute: {{ .Values.auth.ldap.dn.user.dnAttribute | quote }}
  auth.ldap.dn.user.escape: {{ .Values.auth.ldap.dn.user.escape | quote }}
  auth.ldap.dn.user.valid-regex: {{ .Values.auth.ldap.dn.user.validRegex | quote }}
  auth.ldap.dn.user.search-base: {{ .Values.auth.ldap.dn.user.searchBase | quote }}
  auth.ldap.dn.user.attribute: {{ .Values.auth.ldap.dn.user.attribute | quote }}
  {{- end }}

  {{- if eq .Values.auth.type "dummy" }}
  {{- if .Values.auth.dummy.password }}
  auth.dummy.password: {{ .Values.auth.dummy.password | quote }}
  {{- end }}
  {{- end }}

  {{- if eq .Values.auth.type "custom" }}
  auth.custom.class-name: {{ .Values.auth.custom.className | quote }}
  auth.custom.config : {{ toJson .Values.auth.custom.config | quote }}
  {{- end }}

  {{- /* Singleuser */}}
  {{- if .Values.singleuser.lifecycleHooks }}
  singleuser.lifecycle-hooks: {{ toJson .Values.singleuser.lifecycleHooks | quote }}
  {{- end }}
  {{- if .Values.singleuser.initContainers }}
  singleuser.init-containers: {{ toJson .Values.singleuser.initContainers | quote }}
  {{- end }}
  singleuser.network-tools.image.name: {{ .Values.singleuser.networkTools.image.name | quote }}
  singleuser.network-tools.image.tag: {{ .Values.singleuser.networkTools.image.tag | quote }}
  singleuser.cloud-metadata: |
    {{- .Values.singleuser.cloudMetadata | toYaml | trimSuffix "\n" | nindent 4 }}
  singleuser.start-timeout: {{ .Values.singleuser.startTimeout | quote }}
  singleuser.image-pull-policy: {{ .Values.singleuser.image.pullPolicy | quote }}
  {{- if .Values.singleuser.imagePullSecret.enabled }}
  singleuser.image-pull-secret-name: singleuser-image-credentials
  {{- end }}
  {{- if .Values.singleuser.cmd }}
  singleuser.cmd: {{ .Values.singleuser.cmd | quote }}
  {{- end }}
  {{- if .Values.singleuser.defaultUrl }}
  singleuser.default-url: {{ .Values.singleuser.defaultUrl | quote }}
  {{- end }}
  singleuser.events: {{ .Values.singleuser.events | quote }}
  singleuser.uid: {{ .Values.singleuser.uid | quote }}
  singleuser.fs-gid: {{ .Values.singleuser.fsGid | quote }}
  {{- if .Values.singleuser.serviceAccountName }}
  singleuser.service-account-name: {{ .Values.singleuser.serviceAccountName | quote }}
  {{- end }}
  singleuser.node-selector: {{ toJson .Values.singleuser.nodeSelector | quote }}
  {{- if .Values.singleuser.schedulerStrategy }}
  singleuser.scheduler-strategy: {{ .Values.singleuser.schedulerStrategy | quote }}
  {{- end }}
  singleuser.storage.type: {{ .Values.singleuser.storage.type | quote }}
  singleuser.storage.home_mount_path: {{ .Values.singleuser.storage.homeMountPath | quote }}
  {{- if .Values.singleuser.storage.extraVolumesTemplate }}
  singleuser.storage.extra-volumes: {{ include .Values.singleuser.storage.extraVolumesTemplate . | toJson | quote }}
  {{- else }}
  singleuser.storage.extra-volumes: {{ toJson .Values.singleuser.storage.extraVolumes | quote }}
  {{- end }}
  {{- if .Values.singleuser.storage.extraVolumeMountsTemplate }}
  singleuser.storage.extra-volume-mounts: {{ include .Values.singleuser.storage.extraVolumeMountsTemplate . | toJson | quote }}
  {{- else }}
  singleuser.storage.extra-volume-mounts: {{ toJson .Values.singleuser.storage.extraVolumeMounts | quote }}
  {{- end }}
  {{- if eq .Values.singleuser.storage.type "dynamic" }}
  singleuser.storage.capacity: {{ .Values.singleuser.storage.capacity | quote }}
  singleuser.storage.dynamic.pvc-name-template: {{ .Values.singleuser.storage.dynamic.pvcNameTemplate | quote }}
  singleuser.storage.dynamic.volume-name-template: {{ .Values.singleuser.storage.dynamic.volumeNameTemplate | quote }}
  singleuser.storage.dynamic.storage-access-modes: {{ .Values.singleuser.storage.dynamic.storageAccessModes | quote }}
  {{- if .Values.singleuser.storage.dynamic.storageClass }}
  singleuser.storage.dynamic.storage-class: {{ .Values.singleuser.storage.dynamic.storageClass | quote }}
  {{- end }}
  {{- else if eq .Values.singleuser.storage.type "static" }}
  singleuser.storage.static.pvc-name: {{ .Values.singleuser.storage.static.pvcName | quote }}
  singleuser.storage.static.sub-path: {{ .Values.singleuser.storage.static.subPath | quote }}
  {{- else if eq .Values.singleuser.storage.type "hostPath" }}
  singleuser.storage.home_host_path_template: {{ .Values.singleuser.storage.homeHostPathTemplate | quote }}
  {{- end }}
  {{- if .Values.singleuser.memory.limit }}
  singleuser.memory.limit: {{ .Values.singleuser.memory.limit | quote }}
  {{- end }}
  {{- if .Values.singleuser.memory.guarantee }}
  singleuser.memory.guarantee: {{ .Values.singleuser.memory.guarantee | quote }}
  {{- end }}
  {{- if .Values.singleuser.cpu.limit }}
  singleuser.cpu.limit: {{ .Values.singleuser.cpu.limit | quote }}
  {{- end }}
  {{- if .Values.singleuser.cpu.guarantee }}
  singleuser.cpu.guarantee: {{ .Values.singleuser.cpu.guarantee | quote }}
  {{- end }}
  {{- if .Values.singleuser.extraResource.limits }}
  singleuser.extra-resource.limits: |
    {{- range $key, $value := .Values.singleuser.extraResource.limits }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  {{- if .Values.singleuser.extraResource.guarantees }}
  singleuser.extra-resource.guarantees: |
    {{- range $key, $value := .Values.singleuser.extraResource.guarantees }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  {{- if .Values.singleuser.extraAnnotations }}
  singleuser.extra-annotations: |
    {{- range $key, $value := .Values.singleuser.extraAnnotations }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
  singleuser.extra-labels: |
    hub.jupyter.org/network-access-hub: "true"
    {{- range $key, $value := .Values.singleuser.extraLabels }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- if .Values.singleuser.extraEnvTemplate }}
  {{- end }}
  {{- if .Values.singleuser.extraEnv }}
  singleuser.extra-env: |
    {{- range $key, $value := .Values.singleuser.extraEnv }}
    {{ $key | quote }}: {{ $value | quote }}
    {{- end }}
  {{- end }}


  {{- /* KubeSpawner */}}
  kubespawner.common-labels: |
    {{- $_ := merge (dict "heritageLabel" "jupyterhub") . }}
    {{- include "jupyterhub.commonLabels" $_ | nindent 4 }}


  {{- /* Hub */}}
  hub.allow-named-servers: {{ .Values.hub.allowNamedServers | quote }}
  hub.concurrent-spawn-limit: {{ .Values.hub.concurrentSpawnLimit | quote }}
  hub.consecutive-failure-limit: {{ .Values.hub.consecutiveFailureLimit | quote }}
  {{- if .Values.hub.activeServerLimit }}
  hub.active-server-limit: {{ .Values.hub.activeServerLimit | quote }}
  {{- end }}
  {{- if .Values.hub.services }}
  hub.services: |
    {{- /* include hub.services *except* api_tokens */}}
    {{- range $name, $service := .Values.hub.services }}
    {{ $name }}:
      {{- range $key, $value := $service }}
      {{- if ne $key "apiToken" }}
      {{- /* Use toJson since values can be more than just strings */}}
      {{ $key }}: {{ toJson $value }}
      {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if .Values.hub.extraConfig }}
  {{- $extraConfigType := typeOf .Values.hub.extraConfig }}
  {{- if eq $extraConfigType "string" }}
  hub.extra-config.default.py: |
    {{- .Values.hub.extraConfig | nindent 4 }}
  {{- else if eq $extraConfigType "map[string]interface {}" }}
  {{- range $key, $value := .Values.hub.extraConfig }}
  hub.extra-config.{{ $key }}.py: |
    {{- $value | nindent 4 }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- if .Values.hub.extraConfigVars }}
  hub.extra-vars: {{ toJson .Values.hub.extraConfigVars | quote }}
  {{- end }}
  hub.base_url: {{ .Values.hub.baseUrl | quote }}
  {{- if eq .Values.hub.db.type "sqlite-pvc" }}
  hub.db_url: "sqlite:///jupyterhub.sqlite"
  {{- else if eq .Values.hub.db.type "sqlite-memory" }}
  hub.db_url: "sqlite://"
  {{- else }}
  hub.db_url: {{ .Values.hub.db.url | quote }}
  {{- end }}
  {{- if .Values.hub.cookieSecret }}
  token.cookie_secret: {{ .Values.hub.cookieSecret | quote }}
  {{- end }}

  {{- /* Other */}}
  debug.enabled: {{ .Values.debug.enabled | quote }}
  {{- range $key, $value := .Values.hub.extraConfigMap }}
  custom.{{ $key }}: {{ toJson $value | quote }}
  {{- end }}
