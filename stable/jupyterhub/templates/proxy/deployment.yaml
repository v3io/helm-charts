{{- $manualHTTPS := (and .Values.proxy.https.enabled (eq .Values.proxy.https.type "manual")) -}}
{{- $manualHTTPSwithsecret := (and .Values.proxy.https.enabled (eq .Values.proxy.https.type "secret")) -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: proxy
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jupyterhub.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- /* Changes here will cause the Deployment to restart the pods. */}}
        {{- include "jupyterhub.matchLabels" . | nindent 8 }}
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
        {{- if .Values.proxy.labels }}
        {{- .Values.proxy.labels | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      annotations:
        # This lets us autorestart when the secret changes!
        checksum/hub-secret: {{ include (print $.Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        checksum/proxy-secret: {{ include (print $.Template.BasePath "/proxy/secret.yaml") . | sha256sum }}
        {{- if .Values.proxy.annotations }}
        {{- .Values.proxy.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
    spec:
      nodeSelector: {{ toJson .Values.proxy.nodeSelector }}
      terminationGracePeriodSeconds: 60
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values: ['hub']
                    - key: release
                      operator: In
                      values: [{{ .Release.Name | quote }}]
      {{- if $manualHTTPSwithsecret }}
      volumes:
        - name: tls-secret
          secret:
            secretName: {{ .Values.proxy.https.secret.name }}
      {{- end }}
      {{- if $manualHTTPS }}
      volumes:
        - name: tls-secret
          secret:
            secretName: manual-tls-proxy-{{ .Release.Name }}
      {{- end }}
      containers:
        - name: chp
          image: {{ .Values.proxy.chp.image.name }}:{{ .Values.proxy.chp.image.tag }}
          command:
            - configurable-http-proxy
            - --ip=0.0.0.0
            - --api-ip=0.0.0.0
            - --api-port=8001
            - --default-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
            - --error-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)/hub/error
            {{- if $manualHTTPS }}
            - --port=8443
            - --redirect-port=8000
            - --ssl-key=/etc/chp/tls/tls.key
            - --ssl-cert=/etc/chp/tls/tls.crt
            {{- else if $manualHTTPSwithsecret }}
            - --port=8443
            - --redirect-port=8000
            - --ssl-key=/etc/chp/tls/{{ .Values.proxy.https.secret.key }}
            - --ssl-cert=/etc/chp/tls/{{ .Values.proxy.https.secret.crt }}
            {{- else }}
            - --port=8000
            {{- end }}
            {{- if .Values.debug.enabled }}
            - --log-level=debug
            {{- end }}
          {{- if or $manualHTTPS $manualHTTPSwithsecret }}
          volumeMounts:
            - name: tls-secret
              mountPath: /etc/chp/tls
              readOnly: true
          {{- end }}
          resources:
            {{- .Values.proxy.chp.resources | toYaml | trimSuffix "\n" | nindent 12 }}
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
          imagePullPolicy: {{ .Values.proxy.chp.image.pullPolicy }}
          ports:
            {{- if or $manualHTTPS $manualHTTPSwithsecret }}
            - containerPort: 8443
              name: proxy-https
            {{- end }}
            - containerPort: 8000
              name: proxy-public
            - containerPort: 8001
              name: api
