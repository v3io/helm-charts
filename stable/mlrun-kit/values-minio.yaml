# We use global values scope to multiplex the docker-registry details to both mlrun and nuclio
global:

  # External host/ip to reach the k8s node. This might take various values if k8s is run in a VM or a cloud env
  externalHostAddress: localhost
  registry:
    url: mustprovide
    secretName:
  nuclio:
    dashboard:
      nodePort: 30050

nuclio:

  # coupled with mlrun.nuclio.dashboardName template in mlrun chart
  fullnameOverride: nuclio
  controller:
    enabled: true
    image:
      tag: 1.8.14-amd64
  dashboard:
    enabled: true
    # nodePort - taken from global.nuclio.dashboard.nodePort for re-usability
    image:
      tag: 1.8.14-amd64
  autoscaler:
    enabled: false
  dlx:
    enabled: false
  rbac:
    create: true
    crdAccessMode: cluster
  crd:
    create: true
  platform:
    logger:
      sinks:
        myStdoutLoggerSink:
          kind: stdout
          attributes:
            encoding: console
            timeFieldName: time
            timeFieldEncoding: iso8601
      system:
      - level: debug
        sink: myStdoutLoggerSink
      functions:
      - level: debug
        sink: myStdoutLoggerSink
mlrun:
  fullnameOverride: mlrun
  nuclio:
    mode: enabled
  rbac:
    create: true
  v3io:
    enabled: false
  api:
    fullnameOverride: mlrun-api
    image:
      tag: 1.0.3
    service:
      type: NodePort
      nodePort: 30070
    volumes:
      storageOverride:
        persistentVolumeClaim:
          claimName: mlrun-pvc
    extraEnv:
      - name: MLRUN_HTTPDB__PROJECTS__FOLLOWERS
        value: nuclio
      - name: S3_ENDPOINT_URL
        value: http://minio.mlrun.svc.cluster.local:9000
      - name: AWS_SECRET_ACCESS_KEY
        value: minio123
      - name: AWS_ACCESS_KEY_ID
        value: minio
      - name: MLRUN_HTTPDB__REAL_PATH
        value: s3://
      - name: MLRUN_ARTIFACT_PATH
        value: s3://mlrun/
    extraPersistentVolumeMounts: ~
  ui:
    fullnameOverride: mlrun-ui
    service:
      type: NodePort
      nodePort: 30060
    image:
      tag: 1.0.3

# mlrun persistency resources creation can be disabled if the user would like to provide their own PVC
mlrunPersistency:
  pv:
    create: true
  pvc:
    create: true

sharedPersistency:
  pvc:
    create: false
    spec:
      storageClassName: nfs
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 1Gi

jupyterNotebook:
  name: jupyter-notebook
  enabled: false
  service:
    type: NodePort
    nodePort: 30040
    port: 8888
  ingress:
    enabled: false
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths: [ ]
    tls: [ ]
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  image:
    repository: quay.io/mlrun/jupyter
    tag: 1.0.3
    pullPolicy: IfNotPresent
  # use this to override mlrunUIURL, by default it will be auto-resolved to externalHostAddress and
  # mlrun UI's node port
  mlrunUIURL:
  persistency:
    enabled: true
    pvc:
      create: true
      spec:
        storageClassName: nfs
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 1Gi

mpi-operator:
  nameOverride: mpi-operator
  crd:
    create: false
  rbac:
    clusterResources:
      create: false
    namespaced:
      create: false
  deployment:
    create: false

## customize PV spec used for nfs-server provisioner
## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
##
nfsPv:
  create: false
  specOverride: {}

nfs-server-provisioner:
  replicaCount: 0
  storageClass:
    create: false
  rbac:
    create: false
  nameOverride: nfs-server-provisioner
  persistence:
    enabled: false
    storageClass: "mlrun-kit-nfs"
    size: 5Gi


minio:
  enabled: true
  rootUser: minio
  rootPassword: minio123
  replicas: 4
  resources:
    requests:
      memory: 0.5Gi
  service:
    type: NodePort
    port: 9000
    nodePort: 30080
  consoleService:
    type: NodePort
    port: 9001
    nodePort: 30090
  persistence:
    size: 1Gi
  fullnameOverride: minio
  buckets:
    - name: mlrun
      policy: none
      purge: false
      versioning: false
