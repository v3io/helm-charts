apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "jupyter.fullname" . }}
  labels:
    app: {{ template "jupyter.name" . }}
    chart: {{ template "jupyter.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "jupyter.name" . }}
      chart: {{ template "jupyter.chart" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  template:
    metadata:
      labels:
        app: {{ template "jupyter.name" . }}
        chart: {{ template "jupyter.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        iguazio.com/prometheus-pull: "true"
        iguazio.com/prometheus-pull-port: "{{ .Values.proxy.servicePort }}"
    spec:
      serviceAccountName: {{ template "jupyter.jobexecutor" . }}
      {{- if .Values.securityContext }}
      securityContext:
      {{- range $securityPolicy, $value := .Values.securityContext }}
        {{ $securityPolicy }}: {{ $value }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: daemon-health
          image: "{{ .Values.daemon.image.repository }}:{{ .Values.daemon.image.tag }}"
          imagePullPolicy: {{ .Values.daemon.image.pullPolicy }}
          command: ["/bin/bash", "/etc/config/daemon/daemon-health.sh"]
          volumeMounts:
            - mountPath: /etc/config/daemon
              name: config-volume
            - mountPath: /var/run/iguazio/daemon_health
              name: daemon-health
{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
        - name: jks
          image: "{{ .Values.presto.image.repository }}:{{ .Values.presto.image.tag }}"
          imagePullPolicy: {{ .Values.presto.image.pullPolicy }}
          command: ["/bin/bash", "/etc/config/jks/create-cert.sh"]
          volumeMounts:
            - mountPath: /etc/config/jks
              name: config-volume
            - mountPath: {{ .Values.presto.secretsMountPath }}
              name: java-cert
{{- end }}
{{- end }}
      containers:
        - name: jupyter
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          command: ["/bin/bash", "{{ .Values.image.command }}"]
          workingDir: "/User"
          args:
            - --ip="0.0.0.0"
            - --port={{ .Values.servicePort }}
            - --NotebookApp.token=''
            - --NotebookApp.password=''
            - --notebook-dir="/User"
            - --NotebookApp.default_url="/lab"
            - --Application.log_level="WARN"
            - --Application.log_datefmt="%Y-%m-%d_%H:%M:%S"
{{- if .Values.debug.enabled }}
            - --debug
{{- end }}
          ports:
            - containerPort: {{ .Values.servicePort }}
              name: jupyter
          resources:
{{ toYaml .Values.resources | indent 12 }}
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - /etc/config/jupyter/health_check.sh
              - --uri-path=/lab
              - --port={{ .Values.servicePort }}
            initialDelaySeconds: 90
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - /etc/config/jupyter/health_check.sh
              - --uri-path=/lab
              - --port={{ .Values.servicePort }}
            initialDelaySeconds: 5
            periodSeconds: 10
          env:
{{- if .Values.config.jsonLogging }}
            - name: JUPYTER_ENABLE_JSON_LOGGING
              value: {{ .Values.config.jsonLogging | quote }}
{{- end }}
            - name: SHELL
              value: /bin/bash
{{- if .Values.presto }}
{{- if and .Values.presto.keyBinary .Values.presto.certBinary }}
            - name: DATABASE_URL
              value: presto://{{ .Values.v3io.username }}:{{ .Values.v3io.accessKey }}@{{ .Values.presto.hostname }}:443/{{ .Values.presto.catalog }}?protocol=https&requests_kwargs={{ printf "{\"verify\": \"%[1]s/tls.crt\", \"cert\": [\"%[1]s/tls.crt\", \"%[1]s/tls.key\"]}" .Values.presto.secretsMountPath | urlquery }}
{{- else }}
            - name: DATABASE_URL
              value: presto://{{ .Values.presto.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.presto.port }}/{{ .Values.presto.catalog }}
{{- end }}
{{- end }}
{{- if .Values.v3io.api }}
            - name: V3IO_API
              value: {{ .Values.v3io.api.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.v3io.api.port }}
{{- end }}
{{- if .Values.v3io.framesd }}
            - name: V3IO_FRAMESD
              value: {{ .Values.v3io.framesd.hostname }}:{{ .Values.v3io.framesd.port }}
{{- end }}
{{- if .Values.environment }}
{{- range $name, $val := .Values.environment.extra }}
            - name: {{ $name }}
              value: {{ $val | quote }}
{{ end -}}
{{- if .Values.environment.template }}
{{ include .Values.environment.template . | indent 12 }}
{{- end }}
{{- end }}
          volumeMounts:
            - mountPath: /User/v3io
              name: v3io-fuse
            - mountPath: /etc/config/jupyter
              name: config-volume
            - mountPath: /var/run/iguazio/daemon_health
              name: daemon-health
{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
            - mountPath: {{ .Values.presto.secretsMountPath }}
              name: java-cert
{{- end }}
{{- end }}
{{- if .Values.volumes }}
{{ include .Values.volumes.volumeMountsTemplate . | indent 12 }}
{{- end }}
{{- if .Values.pvc }}
{{ include .Values.pvc.pvcVolumeMountsTemplate . | indent 12 }}
{{- end }}
        - name: sidecar-proxy
          image: {{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.tag }}
          command: ["proxy_server"]
          args:
          - --listen-addr=:{{ .Values.proxy.servicePort }}
          - --forward-addr=127.0.0.1:{{ .Values.servicePort }}
          - --log-level={{ .Values.proxy.logLevel }}
          - --namespace={{ .Release.Namespace }}
          - --service-name={{ .Release.Name }}
          - --instance-name={{ template "jupyter.fullname" . }}
{{- if .Values.proxy.metricNames }}
{{- range $val := .Values.proxy.metricNames }}
          - --metric-name={{ $val }}
{{ end -}}
{{- end }}
          ports:
            - containerPort: {{ .Values.proxy.servicePort }}
              name: sidecar-proxy
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "jupyter.fullname" . }}
        - name: daemon-health
          emptyDir: {}
{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
        - name: java-cert
          emptyDir: {}
{{- end }}
{{- end }}
{{- if .Values.volumes }}
{{ include .Values.volumes.volumesTemplate . | indent 8 }}
{{- end }}
{{- if .Values.pvc }}
{{ include .Values.pvc.pvcVolumesTemplate . | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
