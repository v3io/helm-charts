apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jupyter.fullname" . }}
  labels:
    app: {{ template "jupyter.name" . }}
    chart: {{ template "jupyter.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  health_check.sh: |
{{ include "v3io-configs.script.httpHealthCheckWithJava" . | indent 4 }}
{{ include "v3io-configs.script.v3ioDaemonHealthCheck" . | indent 4 }}

  daemon-health.sh: |
    #!/usr/bin/env bash

    cp /usr/local/bin/healthz /var/run/iguazio/daemon_health/healthz

{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
  create-cert.sh: |
    #!/bin/bash

    set -e

    echo -n "{{ .Values.presto.keystoreBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.jks
{{- if and .Values.presto.keyBinary .Values.presto.certBinary }}
    echo -n "{{ .Values.presto.keyBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.key
    echo -n "{{ .Values.presto.certBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.crt
{{- end }}
{{- end }}
{{- end }}

  v3io-jupyter.sh: |
    #!/usr/bin/env bash
    set -e

    ## log + timer
    start=${SECONDS}
    log () {
      echo [$(( SECONDS - start ))s] "$*"
    }

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    ## Reset .bashrc on revision update
    BASHRC_REV=1
    if ! $(grep -q IGZ_BASHRC_REV_${BASHRC_REV} ${HOME}/.bashrc 2>/dev/null); then
      log 'Reset .bashrc on revision update'
      echo "#IGZ_BASHRC_REV_${BASHRC_REV}" > ${HOME}/.bashrc
    fi


    ## Kubectl autocompletion
    if [ "$(grep --count 'KUBECTL AUTOCOMPLETION' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure kubectl autocompletion'
      cat << EOF >> ${HOME}/.bashrc
    # ----- KUBECTL AUTOCOMPLETION -----
    if [ -f /etc/bash_completion ]; then
      . /etc/bash_completion
    fi
    if type -t _get_comp_words_by_ref > /dev/null 2>&1 && command -v kubectl > /dev/null 2>&1; then
      source <(kubectl completion bash)
    fi
    # ----- END KUBECTL AUTOCOMPLETION -----

    EOF
    fi


    ## Create v3io symlink
    if [ ! -e "${HOME}/v3io" ]; then
      log 'Create v3io symlink'
      ln -s /v3io ${HOME}
    elif [ ! -L "${HOME}/v3io" ]; then
      log 'Replace v3io dir with symlink'
      rmdir ${HOME}/v3io &&
      ln -s /v3io ${HOME}
    fi


    ## Create conda env dir (fuse), populate .condarc and init
    if [ ! -d "${HOME}/.conda/envs" ]; then
      log 'Configure conda'
      mkdir -p ${HOME}/.conda/envs
    fi
    if [ ! -e "${HOME}/.condarc" ]; then
      cp /conda/.condarc ${HOME}/
    fi
    # prevent .condarc duplicates
    rm -f /conda/.condarc
    # conda init
    if [ "$(grep --count '>>> conda initialize >>>' ${HOME}/.bashrc)" == "0" ]; then
      conda init bash 2>&1
    fi


    # IG-9854
    if [ "$(grep --count Slf4jLogger /hadoop/etc/hadoop/log4j.properties)" == "0" ]; then
      echo log4j.logger.vendor.akka.event.slf_4j.Slf4jLogger=WARN >> /hadoop/etc/hadoop/log4j.properties
    fi


    ## Init commands
{{- if .Values.initCommands }}
    log 'Configure init commands'
    mkdir -p ${HOME}/.igz
{{- range $index, $initCmd := .Values.initCommands }}
    if [ ! -e "${HOME}/.igz/.{{ $initCmd.name }}" ]; then
{{ $initCmd.command | indent 6 }}
      touch ${HOME}/.igz/.{{ $initCmd.name }}
    fi
{{ end -}}
{{- end }}


    ## Spark
{{- if .Values.spark }}
    log 'Configure spark'
    cat << EOF >> ${SPARK_HOME}/conf/spark-defaults.conf
    spark.master=spark://{{ .Values.spark.hostname }}:{{ .Values.spark.port }}
    spark.driver.host=$(hostname -i)
    spark.executor.cores={{ .Values.spark.executorCores }}
    spark.executor.memory={{ .Values.spark.executorMemory }}
    spark.cores.max={{ .Values.spark.maxApplicationCores }}
    spark.sql.catalogImplementation=in-memory
    EOF
    for arg in V3IO_USERNAME V3IO_PASSWORD V3IO_TENANT V3IO_ACCESS_KEY; do
      if [ "${!arg}" != "" ]; then
        echo "spark.executorEnv.${arg}=${!arg}" >> ${SPARK_HOME}/conf/spark-defaults.conf
      fi
    done
{{- end }}
    # add iguazio spark pythonpath
    export PYTHONPATH=$IGZ_SPARK_PYTHONPATH


    ## Presto
{{- if .Values.presto }}
    log 'Configure presto'
    rm -rf ${IGUAZIO_HOME}/.presto_alias
    touch ${IGUAZIO_HOME}/.trino_history
{{- if .Values.presto.keystoreBinary }}
      cat << EOF > ${IGUAZIO_HOME}/.presto_alias
    alias prestojks="TRINO_PASSWORD=$V3IO_ACCESS_KEY presto-cli --truststore-path {{ .Values.presto.secretsMountPath }}/tls.jks --truststore-password {{ .Values.presto.passphrase }} --user \$V3IO_USERNAME --password \$@"
    alias trinojks="prestojks \$@"
    alias prestow="prestojks --server https://{{ .Values.presto.hostname }} \$@"
    alias trinow="prestow \$@"
    EOF
{{- else  }}
      cat << EOF > ${IGUAZIO_HOME}/.presto_alias
    alias prestow="presto-cli --server http://{{ .Values.presto.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.presto.port }} \$@"
    alias trinow="prestow \$@"
    EOF
{{- end }}
    cat << EOF >> ${IGUAZIO_HOME}/.presto_alias
    alias presto="prestow --catalog={{ .Values.presto.catalog }} \$@"
    alias trino="presto \$@"
    EOF
    if [ "$(grep --count 'PRESTO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      cat << EOF >> ${HOME}/.bashrc
    # ----- PRESTO CONFIG -----
    [ -e ${IGUAZIO_HOME}/.presto_alias ] && source ${IGUAZIO_HOME}/.presto_alias
    # --- END PRESTO CONFIG ---

    EOF
    fi
{{- end }}


    ## Hive
{{- if .Values.hive }}
    log 'Configure hive'
    echo alias hive=\"JAVA_HOME=${IGUAZIO_HOME}/jdk-8u181 ${HIVE_HOME}/bin/hive -hiveconf hive.exec.scratchdir={{ .Values.hive.scratchDirPrefix }}/${V3IO_USERNAME}/hive -hiveconf hive.metastore.uris=thrift://{{ .Values.hive.metastore.hostname }}:{{ .Values.hive.metastore.port }} \$@\" >> ${IGUAZIO_HOME}/.hive_alias
    if [ "$(grep --count 'HIVE CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      cat << EOF >> ${HOME}/.bashrc
    # ----- HIVE CONFIG -----
    test -e ${IGUAZIO_HOME}/.hive_alias && source ${IGUAZIO_HOME}/.hive_alias
    # --- END HIVE CONFIG ---

    EOF
    fi
{{- end }}


    ## Download extra binaries
{{- if and .Values.v3io.downloadBinaries }}
    log 'Download extra binaries'
{{- range $binary, $url := .Values.v3io.downloadBinaries }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/{{ $binary }} {{ $url }}
    chmod +x ${IGUAZIO_HOME}/bin/{{ $binary }}
{{ end -}}
{{- end }}


    ## TSDB
{{- if and .Values.v3io.tsdbctl .Values.v3io.tsdbctl.download }}
    log 'Configure TSDB'
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/tsdbctl {{ .Values.v3io.tsdbctl.download }}
    chmod +x ${IGUAZIO_HOME}/bin/tsdbctl
    rm -f ${IGUAZIO_HOME}/.tsdb_alias
    if [ "${V3IO_API}" -a "${V3IO_ACCESS_KEY}" ]; then
      echo alias tsdbctl=\"tsdbctl --server ${V3IO_API} --access-key ${V3IO_ACCESS_KEY}\" >> ${IGUAZIO_HOME}/.tsdb_alias
      if [ "$(grep --count 'TSDB CONFIG' ${HOME}/.bashrc)" == "0" ]; then
        cat << EOF >> ${HOME}/.bashrc
    # ----- TSDB CONFIG -----
    test -e ${IGUAZIO_HOME}/.tsdb_alias && source ${IGUAZIO_HOME}/.tsdb_alias
    # --- END TSDB CONFIG ---

    EOF
      fi
    fi
{{- end }}


    ## Iguazio terminal logo
{{- if .Values.config.logo }}
    if [ "$(grep --count 'LOGO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure iguazio logo'
      echo "# ----- LOGO CONFIG -----" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "printf '\033[?7l'" >> ${HOME}/.bashrc
      echo "echo {{ .Values.config.logo }} | base64 --decode" >> ${HOME}/.bashrc
      echo "printf '\033[?7h'" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "# --- END LOGO CONFIG ---" >> ${HOME}/.bashrc
      echo "" >> ${HOME}/.bashrc
    fi
{{- end }}


    ## Prompt config
    if [ "$(grep --count 'IGUAZIO PROMPT CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      log 'Configure prompt'
      cp ${CONDA_HOME}/.bash_prompt.sh ${HOME}
      cat << EOF >> ${HOME}/.bashrc
    # ----- IGUAZIO PROMPT CONFIG -----
    alias ll="ls -lah --color"
    source ${HOME}/.bash_prompt.sh
    # --- END IGUAZIO PROMPT CONFIG ---

    EOF
    fi


    ## SSH config
{{- if .Values.sshServer.enabled }}
    log 'Configure SSH'
    cp /var/run/iguazio/secrets/ssh/* ${IGUAZIO_HOME}/.ssh
    cat << EOF >> /etc/ssh/sshd_config
    PasswordAuthentication no
    PermitRootLogin no
    Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
    EOF
    /usr/sbin/sshd -f /etc/ssh/sshd_config
    # fix ssh env (ssh default home is /igz)
    env | awk -F"=" '{printf("export %s=\"%s\"\n",$1,$2)}' > /igz/.ssh_environment
    cat << EOF > /igz/.profile
    source /igz/.ssh_environment
    cd ${HOME}
    source ${HOME}/.bashrc
    EOF
{{- end }}
    echo "source ${HOME}/.bashrc" > ${HOME}/.bash_profile


    ## Vim config
    log 'Configure vim'
    touch ${HOME}/.viminfo
    chmod a+w ${HOME}/.viminfo
    # Remove term= line from .vimrc - setting causes some keys (for ex. del) not to work
    if [ -e "${HOME}/.vimrc" ]; then
      sed -i '/:set term=builtin_ansi/d' ${HOME}/.vimrc
    fi


    ## Git config
    log 'Configure git'
    # Prevent git from failing on fuse mount (not owned by iguazio user)
    # https://stackoverflow.com/questions/72978485/ubuntu-20-04-git-submodule-update-failed-with-fatal-detected-dubious-ownershi
    if [ "$(git config --global --get safe.directory)" == "" ]; then
      git config --global --add safe.directory '*'
    fi
    # Store credentials in cache for multi pushing
    if [ "$(git config --global --get credential.helper)" == "" ]; then
      git config --global --add credential.helper store
    fi


    ## Block conda/pip installs on prebaked conda envs
    # https://github.com/conda/conda/issues/7791
    if [ "$(grep --count 'BLOCK INSTALL ON CONDA BASE' ${HOME}/.bashrc)" == "0" ]; then
      log 'Block conda, pip on prebaked envs'
      cat << EOF >> ${HOME}/.bashrc
    # ----- BLOCK INSTALL ON CONDA BASE -----
    function pip(){
      if [ "\$1" = "install" ]; then
        if [ "\${CONDA_DEFAULT_ENV-}" = "base" ]; then
          echo "Error: PIP installations to the conda (base) environment are not persistent."
          echo "       Please activate a different conda environment or create a new one."
          return 1
        fi
        for arg in "\$@"
        do
            if [[ "\$arg" == "--user" ]]; then
                echo "Error: The --user flag cannot be used when installing packages inside a conda environment."
                echo "       Please use 'pip install' without the --user flag instead."
                return 1
            fi
        done        
      fi
      command pip "\$@"
    }
    
    function extended_conda(){
      if [ "\${CONDA_DEFAULT_ENV-}" = "base" ] && [ "\$1" = "install" ]; then
        echo "Error: Conda installations to the (base) environment are not persistent."
        echo "       Please activate a different conda environment or create a new one."
        return 1
      fi
      if [[ \${CONDA_DEFAULT_ENV-} =~ jupyter|mlrun-base|mlrun-extended ]] && [ "\$1" = "install" ]; then
        echo "Error: Conda installations to the (\${CONDA_DEFAULT_ENV}) environment are not persistent."
        echo "       Please use PIP for persistent installations or create/activate another conda environment."
        return 1
      fi
      conda "\$@"
    }
    alias conda=extended_conda
    # ----- END BLOCK INSTALL ON CONDA BASE -----

    EOF
    fi


    ## Create bashrc for non-interactive SSH logins
    if [ ! -e "${HOME}/.bashrc-noninteractive" ]; then
      log 'Configure non-interactive bashrc'
      cat << EOF > ${HOME}/.bashrc-noninteractive
    # bashrc for non-interactive SSH logins
    EOF
    fi


    ## Disable pip user (local) installations
    export PYTHONNOUSERSITE=1


    ## IPython configuration for magic commands
    IPYTHON_CONFIG_SCRIPT="${HOME}/.ipython/profile_default/ipython_config.py"
    IPYTHON_CONFIG_REV=1
    if [ ! -e "${HOME}/.ipython/profile_default" ]; then
      mkdir -p ${HOME}/.ipython/profile_default
    fi    
    # reset ipython_config.py on revision update
    if ! $(grep -q IGZ_IPYTHON_CONFIG_REV_${IPYTHON_CONFIG_REV} ${IPYTHON_CONFIG_SCRIPT} 2>/dev/null); then
      log 'Configure ipython'
      cat << EOF > ${IPYTHON_CONFIG_SCRIPT}
    #IGZ_IPYTHON_CONFIG_REV_${IPYTHON_CONFIG_REV}
    import pkg_resources
    c = get_config()
    c.Application.log_datefmt = '%Y-%m-%d %H:%M:%S'
    try:
        if pkg_resources.get_distribution('jupysql'):
            c.InteractiveShellApp.extensions.append("sql")
            c.SqlMagic.autocommit=False
    except pkg_resources.DistributionNotFound:
        pass
    try:            
        if pkg_resources.get_distribution('nuclio-jupyter'):
            c.InteractiveShellApp.extensions.append("nuclio")
    except pkg_resources.DistributionNotFound:
        pass
    EOF
    fi


    export JUPYTER_FULLNAME={{ template "jupyter.fullname" . }}
    # PIP persistency on fuse mount for prebaked conda envs
    # special handling for base env:
    # clean leftovers from previous env
    cat << EOF > ${CONDA_HOME}/etc/conda/activate.d/env_vars.sh
    for env in ${JUPYTER_FULLNAME} mlrun-base mlrun-extended; do
      export PATH=\$(echo \${PATH} | sed "s|/User/.pythonlibs/\${env}/bin:||g")
    done
    unset PIP_PREFIX
    unset PYTHONPATH
    EOF
    # remaining prebaked envs:
    for env in $(ls /conda/envs); do
      if [ "${env}" == 'jupyter' ]; then
        env_name=${JUPYTER_FULLNAME}
      else
        env_name=${env}
      fi
      cat << EOF > ${CONDA_HOME}/envs/${env}/etc/conda/activate.d/env_vars.sh
    # clean leftovers from previous env
    for env in ${JUPYTER_FULLNAME} mlrun-base mlrun-extended; do
      export PATH=\$(echo \${PATH} | sed "s|/User/.pythonlibs/\${env}/bin:||g")
    done
    # update paths
    export PIP_PREFIX=/User/.pythonlibs/${env_name}
    export PYTHONPATH=/User/.pythonlibs/${env_name}/lib/python3.9/site-packages:\${IGZ_SPARK_PYTHONPATH}
    export PATH=/User/.pythonlibs/${env_name}/bin:\${PATH}
    EOF
      cat << EOF > ${CONDA_HOME}/envs/${env}/etc/conda/deactivate.d/env_vars.sh
    unset PIP_PREFIX
    export PYTHONPATH=\${IGZ_SPARK_PYTHONPATH}
    export PATH=\$(echo \${PATH} | sed "s|/User/.pythonlibs/${env_name}/bin:||g")
    EOF
    done


    # Backup old binaries from jupyter path (upgrade)
    mkdir -p ${HOME}/.igz
    CLEANUP_FILE='.bin_cleanup_python3.7'
    if ! $(grep -wq "^${JUPYTER_FULLNAME}$" ${HOME}/.igz/${CLEANUP_FILE} 2>/dev/null); then
      echo ${JUPYTER_FULLNAME} >> ${HOME}/.igz/${CLEANUP_FILE}
      if [ -d "/User/.pythonlibs/${JUPYTER_FULLNAME}/bin" ]; then
        log "Backup old binaries in .pyhtonlibs/${JUPYTER_FULLNAME}/bin"
        mkdir -p /User/.pythonlibs/${JUPYTER_FULLNAME}/.bin/python3.7
        cp -r /User/.pythonlibs/${JUPYTER_FULLNAME}/bin/* /User/.pythonlibs/${JUPYTER_FULLNAME}/.bin/python3.7/
        rm -rf /User/.pythonlibs/${JUPYTER_FULLNAME}/bin/*
      fi
    fi


    # Set jupyter directories to fuse (persistent)
    log 'Configure jupyter'
    # https://jupyterlab.readthedocs.io/en/stable/user/directories.html
    # https://docs.jupyter.org/en/latest/use/jupyter-directories.html
    export JUPYTERLAB_DIR=${HOME}/.${JUPYTER_FULLNAME}/lab
    export JUPYTERLAB_SETTINGS_DIR=${JUPYTERLAB_DIR}/user-settings
    export JUPYTERLAB_WORKSPACES_DIR=${JUPYTERLAB_DIR}/workspaces
    export JUPYTER_DATA_DIR=${JUPYTERLAB_DIR}
    export JUPYTER_CONFIG_DIR=${HOME}/.${JUPYTER_FULLNAME}
    export JUPYTER_RUNTIME_DIR=/igz/.${JUPYTER_FULLNAME}
    if [ ! -e "${JUPYTERLAB_DIR}/static" ]; then
        mkdir -p ${JUPYTERLAB_DIR}
        cp -R /conda/envs/jupyter/share/jupyter/lab/* ${JUPYTERLAB_DIR}
    fi
    if [ ! -e "${JUPYTER_RUNTIME_DIR}" ]; then
        mkdir -p ${JUPYTER_RUNTIME_DIR}
    fi


    ## Jupyter terminal configuration
    if [ ! -e "${JUPYTERLAB_SETTINGS_DIR}/@jupyterlab/terminal-extension/plugin.jupyterlab-settings" ]; then
      mkdir -p ${JUPYTERLAB_SETTINGS_DIR}/@jupyterlab/terminal-extension
      cat << EOF > ${JUPYTERLAB_SETTINGS_DIR}/@jupyterlab/terminal-extension/plugin.jupyterlab-settings
    {
    "theme": "dark"
    }
    EOF
    fi
    
    if [ "$(grep --count 'JUPYTER TERMINAL PATH SUPPORT' ${HOME}/.bashrc)" == "0" ]; then
      cat << EOF >> ${HOME}/.bashrc
    # ----- JUPYTER TERMINAL PATH SUPPORT -----
    if [ ! -z $JUPYTER_SERVER_ROOT ]; then
      export PATH=${PATH}
    fi
    # ----- END JUPYTER TERMINAL PATH SUPPORT -----

    EOF
    fi

    if [ ! -e "${JUPYTER_CONFIG_DIR}/custom/custom.css" ]; then
      mkdir -p ${JUPYTER_CONFIG_DIR}/custom
      cat << EOF > ${JUPYTER_CONFIG_DIR}/custom/custom.css
    .notebook_app .container {
        width:98%; !important
    }
    .terminal-app .container {
        width:98%; !important
    }
    EOF
    fi


    ## Jupyter config files
    # remove old config file
    if [ -e "${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py" ]; then
      rm -f ${JUPYTER_CONFIG_DIR}/jupyter_notebook_config.py
    fi
    # copy jupyter_config.json to persistent dir
    if [ ! -e "${JUPYTER_CONFIG_DIR}/jupyter_config.json" ]; then
      cp /conda/envs/jupyter/etc/jupyter/jupyter_config.json ${JUPYTER_CONFIG_DIR}
    fi
    # prevent duplicates
    rm -f /conda/envs/jupyter/etc/jupyter/jupyter_config.json


    ## ALIGN_MLRUN script generation
    ALIGN_MLRUN_SCRIPT="${HOME}/align_mlrun.sh"
    ALIGN_MLRUN_REV=1
    # reset align_mlrun on revision update
    if ! $(grep -q IGZ_ALIGN_MLRUN_REV_${ALIGN_MLRUN_REV} ${ALIGN_MLRUN_SCRIPT} 2>/dev/null); then
      log 'Configure align_mlrun.sh script'
      cat << EOF > ${ALIGN_MLRUN_SCRIPT}
    #!/bin/bash
    #IGZ_ALIGN_MLRUN_REV_${ALIGN_MLRUN_REV}
    for env in base jupyter; do
      if [ "\${CONDA_DEFAULT_ENV-}" = "\${env}" ]; then
        echo "Not allowed in conda (\${env}) environment where package updates are not persistent."
        echo "Please create a new conda environment or \"conda activate\" an existing environment first:"
        conda env list | grep -v "^base \|^jupyter "
        exit 1
      fi
    done
    CLIENT_MLRUN_VERSION=\$(pip show mlrun | grep Version | awk '{print \$2}')
    SERVER_MLRUN_VERSION=\$(curl -s \${IGZ_MLRUN_API_ENDPOINT}/api/v1/client-spec | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])")
    if [ "\${CLIENT_MLRUN_VERSION}" = "\${SERVER_MLRUN_VERSION}" ] || [ "\${CLIENT_MLRUN_VERSION}" = "\${SERVER_MLRUN_VERSION//-}" ]; then
      echo "Both server & client are aligned (\${CLIENT_MLRUN_VERSION})."
    else
      if [ \${CLIENT_MLRUN_VERSION} ]; then
        echo "Server \${SERVER_MLRUN_VERSION} & client \${CLIENT_MLRUN_VERSION} are unaligned."
        echo "Updating client..."
        pip uninstall -y mlrun
      fi
      pip install mlrun[complete]==\${SERVER_MLRUN_VERSION}
    fi
    EOF
      chmod a+x ${ALIGN_MLRUN_SCRIPT}
    fi


    ## Tutorials
    if [ ! -e "${HOME}/.igz/.getting-started" ] && [ ! -z ${IGZ_JUPYTER_TUTORIALS_URL} ] && [ ! -z ${IGZ_MLRUN_DEMOS_URL} ]; then
      log 'Configure tutorials'
      curl -L ${IGZ_JUPYTER_TUTORIALS_URL} -o /tmp/jupyter-tutorials
      curl -L ${IGZ_MLRUN_DEMOS_URL} -o /tmp/mlrun-demos
      tar -C ${HOME} -xvf /tmp/jupyter-tutorials  --strip-components=1
      rm -f /tmp/jupyter-tutorials
      mkdir -p ${HOME}/demos
      tar -C ${HOME}/demos -xvf /tmp/mlrun-demos  --strip-components=1
      rm -f /tmp/mlrun-demos
      chmod a+x ${HOME}/demos/update-demos.sh || chmod a+x ${HOME}/update-demos.sh || echo 'no update-demos.sh found'
      touch ${HOME}/.igz/.getting-started
    fi


    ## VSCode support
    # create symlinks to /igz (vscode server/extensions try to mv directories - not supported by fuse)
    log 'Configure VSCode support'
    for dir in .vscode-server .vscode-server-insiders; do
      [[ -e "${IGUAZIO_HOME}/$dir" ]] || mkdir -p ${IGUAZIO_HOME}/$dir
      [[ -e "${HOME}/$dir" ]] || ln -s ${IGUAZIO_HOME}/${dir} ${HOME}/${link}
    done
    # hide unwanted kernels
    [[ -e "${HOME}/.vscode" ]] || mkdir -p ${HOME}/.vscode
    [[ -e "${HOME}/.vscode/settings.json" ]] || cat << EOF >> ${HOME}/.vscode/settings.json
    {
        "jupyter.kernels.filter": [
            {
                "path": "/conda/bin/python",
                "type": "pythonEnvironment"
            },
            {
                "path": "/conda/envs/jupyter/bin/python",
                "type": "pythonEnvironment"
            },
            {
                "path": "/usr/local/bin/python",
                "type": "pythonEnvironment"
            }
        ]
    }
    EOF
    # recommend python extension needed to work with jupyter/conda
    [[ -e "${HOME}/.vscode/extensions.json" ]] || cat << EOF >> ${HOME}/.vscode/extensions.json
    {
            // See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
            // Extension identifier format: ${publisher}.${name}. Example: vscode.csharp

            // List of extensions which should be recommended for users of this workspace.
            "recommendations": [
                "ms-python.python"
            ],
            // List of extensions recommended by VS Code that should not be recommended for users of this workspace.
            "unwantedRecommendations": [

            ]
    }
    EOF


    ## SSH Monitor script generation (signal sidecar-proxy to prevent scale to zero on active ssh connections)
{{- if .Values.sshServer.enabled }}
    SCRIPT_NAME=".ssh_monitor"
    SSH_MONITOR_SCRIPT="${IGUAZIO_HOME}/${SCRIPT_NAME}"
    cat << EOF > ${SSH_MONITOR_SCRIPT}
    #!/bin/bash

    file=\$1
    interval=\$2
    connected=0

    while true; do
      if netstat | grep -q ssh; then
        if (( ! connected )); then
          connected=1
          echo 1 > "\$file"
          [[ \$SSH_CONNECTION_DEBUG -eq 1 ]] && echo "[\$(date)] SSH_CONNECTION_DEBUG: Detected open ssh connections" >> /proc/1/fd/1
        fi
      else
        if (( connected )); then
          connected=0
          echo 0 > "\$file"
          [[ \$SSH_CONNECTION_DEBUG -eq 1 ]] && echo "[\$(date)] SSH_CONNECTION_DEBUG: No open ssh connections" >> /proc/1/fd/1
        fi
      fi
      sleep "\$interval"
    done
    EOF
    chmod +x ${SSH_MONITOR_SCRIPT}
    
    # run script in background
    pgrep ${SCRIPT_NAME} 1>/dev/null || nohup ${SSH_MONITOR_SCRIPT} /intercontainer/opensshconnection 10 1>/dev/null &
{{- end }}


    ## Startup hooks
    log 'Configure startup hooks'
    if [ -e "/igz/startup-hook.sh" ]; then
      /bin/bash /igz/startup-hook.sh || true
    fi

    if [ -e "${HOME}/.igz/startup-hook.sh" ]; then
      /bin/bash ${HOME}/.igz/startup-hook.sh || true
    fi


    ## Start jupyter
    log 'Starting jupyter'
    source activate jupyter
    jupyter lab --no-browser $@
