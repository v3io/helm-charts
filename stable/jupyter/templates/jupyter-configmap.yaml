apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jupyter.fullname" . }}
  labels:
    app: {{ template "jupyter.name" . }}
    chart: {{ template "jupyter.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  health_check.sh: |
{{ include "v3io-configs.script.httpHealthCheckWithJava" . | indent 4 }}
    CONFIGURED_V3IOD=$(grep "socket.host" $IGZ_DATA_CONFIG_FILE | cut -f2 -d"=")
    if [ "${CONFIGURED_V3IOD}" != "CURRENT_NODE_IP" ]; then
      /var/run/iguazio/daemon_health/healthz --host ${CONFIGURED_V3IOD}
    fi

  daemon-health.sh: |
    #!/usr/bin/env bash

    cp /usr/local/bin/healthz /var/run/iguazio/daemon_health/healthz

{{- if .Values.presto }}
{{- if .Values.presto.keystoreBinary }}
  create-cert.sh: |
    #!/bin/bash

    set -e

    echo -n "{{ .Values.presto.keystoreBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.jks
{{- if and .Values.presto.keyBinary .Values.presto.certBinary }}
    echo -n "{{ .Values.presto.keyBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.key
    echo -n "{{ .Values.presto.certBinary }}" | base64 --decode > {{ .Values.presto.secretsMountPath }}/tls.crt
{{- end }}
{{- end }}
{{- end }}

  v3io-jupyter.sh: |
    #!/usr/bin/env bash
    set -e

{{ include "v3io-configs.script.lookupService" . | indent 4 }}

    test -e ${HOME}/.bashrc || touch ${HOME}/.bashrc

{{- if .Values.initCommands }}
    mkdir -p ${HOME}/.igz
{{- range $index, $initCmd := .Values.initCommands }}
    if [ ! -e "${HOME}/.igz/.{{ $initCmd.name }}" ]; then
{{ $initCmd.command | indent 6 }}
      touch ${HOME}/.igz/.{{ $initCmd.name }}
    fi
{{ end -}}
{{- end }}

    ALIGN_MLRUN_SCRIPT="${HOME}/align_mlrun.sh"
    if [ ! -e ${ALIGN_MLRUN_SCRIPT} ]; then
      touch ${ALIGN_MLRUN_SCRIPT}
      echo "CLIENT_MLRUN_VERSION=\`pip show mlrun | grep Version | awk '{print \$2}'\`" >> ${ALIGN_MLRUN_SCRIPT}
      echo "SERVER_MLRUN_VERSION=\`curl -s \${IGZ_MLRUN_API_ENDPOINT}/api/healthz | python3 -c \"import sys, json; print(json.load(sys.stdin)['version'])\"\`" >> ${ALIGN_MLRUN_SCRIPT}
      echo "if [ \"\${CLIENT_MLRUN_VERSION}\" = \"\${SERVER_MLRUN_VERSION}\" ] || [ \"\${CLIENT_MLRUN_VERSION}\" = \"\${SERVER_MLRUN_VERSION//-}\" ]; then" >> ${ALIGN_MLRUN_SCRIPT}
      echo "  echo \"Both server & client are aligned (\${CLIENT_MLRUN_VERSION}).\"" >> ${ALIGN_MLRUN_SCRIPT}
      echo "else" >> ${ALIGN_MLRUN_SCRIPT}
      echo "  if [ \${CLIENT_MLRUN_VERSION} ]; then" >> ${ALIGN_MLRUN_SCRIPT}
      echo "    pip uninstall -y mlrun" >> ${ALIGN_MLRUN_SCRIPT}
      echo "  fi" >> ${ALIGN_MLRUN_SCRIPT}
      echo "  pip install mlrun[complete]==\${SERVER_MLRUN_VERSION}" >> ${ALIGN_MLRUN_SCRIPT}
      echo "fi" >> ${ALIGN_MLRUN_SCRIPT}
      chmod a+x ${ALIGN_MLRUN_SCRIPT}
    fi

    mkdir -p ${HOME}/.igz
    if [ ! -e "${HOME}/.igz/.getting-started" ] && [ ! -z ${IGZ_JUPYTER_TUTORIALS_URL} ] && [ ! -z ${IGZ_MLRUN_DEMOS_URL} ]; then
      curl -L ${IGZ_JUPYTER_TUTORIALS_URL} -o /tmp/jupyter-tutorials
      curl -L ${IGZ_MLRUN_DEMOS_URL} -o /tmp/mlrun-demos
      TUTORIALS_SCRIPT_FILE=`tar --list --file=/tmp/jupyter-tutorials|grep igz-tutorials-get.sh`
      DEMOS_SCRIPT_FILE=`tar --list --file=/tmp/jupyter-tutorials|grep update-demos.sh`
      UPDATE_NOTEBOOK_FILE=`tar --list --file=/tmp/jupyter-tutorials|grep update-tutorials.ipynb`
      tar -C /tmp -xvf /tmp/jupyter-tutorials ${TUTORIALS_SCRIPT_FILE} --strip-components=1
      tar -C /tmp -xvf /tmp/jupyter-tutorials ${UPDATE_NOTEBOOK_FILE} --strip-components=1
      tar -C /tmp -xvf /tmp/jupyter-tutorials ${DEMOS_SCRIPT_FILE} --strip-components=1
      chmod a+x /tmp/igz-tutorials-get.sh
      chmod a+x /tmp/update-demos.sh
      chmod a+x /tmp/update-tutorials.ipynb
      if ! /tmp/igz-tutorials-get.sh; then
          tar -C ${HOME} -xvf /tmp/jupyter-tutorials  --strip-components=1
          rm -f /tmp/jupyter-tutorials
      else
          cp /tmp/igz-tutorials-get.sh ${HOME}
          cp /tmp/update-tutorials.ipynb ${HOME}
          cp /tmp/update-demos.sh ${HOME}
      fi
      if ! /tmp/update-demos.sh --mlrun-ver `curl -s ${IGZ_MLRUN_API_ENDPOINT}/api/healthz | python3 -c "import sys, json; print(json.load(sys.stdin)['version'])"`; then
          mkdir -p ${HOME}/demos
          tar -C ${HOME}/demos -xvf /tmp/mlrun-demos  --strip-components=1
          rm -f /tmp/mlrun-demos
      fi
      rm -f  /tmp/igz-tutorials-get.sh /tmp/update-demos.sh /tmp/update-tutorials.ipynb

      touch ${HOME}/.igz/.getting-started
    fi


    if [ ! -e "${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings" ]; then
        mkdir -p ${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension
        touch ${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings
        echo "{" >> ${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings
        echo "\"theme\": \"dark\"" >> ${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings
        echo "}" >> ${HOME}/.jupyter/lab/user-settings/@jupyterlab/terminal-extension/plugin.jupyterlab-settings
    fi

    if [ ! -e "${HOME}/.jupyter/jupyter_notebook_config.py" ]; then
        mkdir -p ${HOME}/.jupyter
        touch ${HOME}/.jupyter/jupyter_notebook_config.py
        echo "c.NotebookApp.contents_manager_class = 'jupyfm.jupyfm.Jupyfm'" >> ${HOME}/.jupyter/jupyter_notebook_config.py
        echo "c.FileContentsManager.delete_to_trash = False" >> ${HOME}/.jupyter/jupyter_notebook_config.py
    fi

    if [ ! -e "${HOME}/.jupyter/custom/custom.css" ]; then
        mkdir -p ${HOME}/.jupyter/custom
        touch ${HOME}/.jupyter/custom/custom.css
        echo ".notebook_app .container {" >> ${HOME}/.jupyter/custom/custom.css
        echo "    width:98%; !important" >> ${HOME}/.jupyter/custom/custom.css
        echo "}" >> ${HOME}/.jupyter/custom/custom.css
        echo ".terminal-app .container {" >> ${HOME}/.jupyter/custom/custom.css
        echo "    width:98%; !important" >> ${HOME}/.jupyter/custom/custom.css
        echo "}" >> ${HOME}/.jupyter/custom/custom.css
    fi

    export JUPYTER_DATA_DIR=${HOME}/.local/share/jupyter/{{ template "jupyter.fullname" . }}
    mkdir -p "${JUPYTER_DATA_DIR}"

{{- if .Values.spark }}
    echo "spark.master=spark://{{ .Values.spark.hostname }}:{{ .Values.spark.port }}" >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.driver.host=$(hostname -i) >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.executor.cores={{ .Values.spark.executorCores }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.executor.memory={{ .Values.spark.executorMemory }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.cores.max={{ .Values.spark.maxApplicationCores }} >> ${SPARK_HOME}/conf/spark-defaults.conf
    echo spark.sql.catalogImplementation=in-memory >> ${SPARK_HOME}/conf/spark-defaults.conf
    for arg in V3IO_USERNAME V3IO_PASSWORD V3IO_TENANT V3IO_ACCESS_KEY; do
      if [ "${!arg}" != "" ]; then
        echo spark.executorEnv.${arg}=${!arg} >> ${SPARK_HOME}/conf/spark-defaults.conf
      fi
    done
{{- end }}

{{- if .Values.presto }}
    rm -rf ${IGUAZIO_HOME}/.presto_alias
    touch ${IGUAZIO_HOME}/.presto_history
{{- if .Values.presto.keystoreBinary }}
    echo alias prestojks=\"PRESTO_PASSWORD=$V3IO_ACCESS_KEY presto-cli --truststore-path {{ .Values.presto.secretsMountPath }}/tls.jks --truststore-password {{ .Values.presto.passphrase }} --user $V3IO_USERNAME --password \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    echo alias prestow=\"prestojks --server https://{{ .Values.presto.hostname }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
{{- else  }}
    echo alias prestow=\"presto-cli --server http://{{ .Values.presto.hostname }}.{{ .Release.Namespace }}.svc:{{ .Values.presto.port }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
{{- end }}
    echo alias presto=\"prestow --catalog={{ .Values.presto.catalog }} \$@\" >> ${IGUAZIO_HOME}/.presto_alias
    if [ "$(grep --count 'PRESTO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- PRESTO CONFIG -----" >> ${HOME}/.bashrc
      echo "source ${IGUAZIO_HOME}/.presto_alias" >> ${HOME}/.bashrc
      echo "# --- END PRESTO CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

{{- if .Values.hive }}
    echo alias hive=\"${HIVE_HOME}/bin/hive -hiveconf hive.exec.scratchdir={{ .Values.hive.scratchDirPrefix }}/${V3IO_USERNAME}/hive -hiveconf hive.metastore.uris=thrift://{{ .Values.hive.metastore.hostname }}:{{ .Values.hive.metastore.port }} \$@\" >> ${IGUAZIO_HOME}/.hive_alias

    if [ "$(grep --count 'HIVE CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- HIVE CONFIG -----" >> ${HOME}/.bashrc
      echo "test -e ${IGUAZIO_HOME}/.hive_alias" && echo "source ${IGUAZIO_HOME}/.hive_alias" >> ${HOME}/.bashrc
      echo "# --- END HIVE CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

{{- if and .Values.v3io.downloadBinaries }}
{{- range $binary, $url := .Values.v3io.downloadBinaries }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/{{ $binary }} {{ $url }}
    chmod +x ${IGUAZIO_HOME}/bin/{{ $binary }}
{{ end -}}
{{- end }}
{{- if and .Values.v3io.tsdbctl .Values.v3io.tsdbctl.download }}
    curl --disable -sSL -o ${IGUAZIO_HOME}/bin/tsdbctl {{ .Values.v3io.tsdbctl.download }}
    chmod +x ${IGUAZIO_HOME}/bin/tsdbctl
    rm -f ${IGUAZIO_HOME}/.tsdb_alias
    if [ "${V3IO_API}" -a "${V3IO_ACCESS_KEY}" ]; then
      echo alias tsdbctl=\"tsdbctl --server ${V3IO_API} --access-key ${V3IO_ACCESS_KEY}\" >> ${IGUAZIO_HOME}/.tsdb_alias
      if [ "$(grep --count 'TSDB CONFIG' ${HOME}/.bashrc)" == "0" ]; then
        echo "# ----- TSDB CONFIG -----" >> ${HOME}/.bashrc
        echo "test -e ${IGUAZIO_HOME}/.tsdb_alias && source ${IGUAZIO_HOME}/.tsdb_alias" >> ${HOME}/.bashrc
        echo "# --- END TSDB CONFIG ---" >> ${HOME}/.bashrc
      fi
    fi
{{- end }}

{{- if .Values.config.logo }}
    if [ "$(grep --count 'LOGO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- LOGO CONFIG -----" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "printf '\033[?7l'" >> ${HOME}/.bashrc
      echo "echo {{ .Values.config.logo }} | base64 --decode" >> ${HOME}/.bashrc
      echo "printf '\033[?7h'" >> ${HOME}/.bashrc
      echo "echo ''" >> ${HOME}/.bashrc
      echo "# --- END LOGO CONFIG ---" >> ${HOME}/.bashrc
    fi
{{- end }}

    if [ "$(grep --count 'IGUAZIO CONFIG' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- IGUAZIO CONFIG -----" >> ${HOME}/.bashrc
      echo alias ll=\"ls -lah --color\" >> ${HOME}/.bashrc
      echo "source ${IGUAZIO_HOME}/bash-it.sh" >> ${HOME}/.bashrc
      echo "# --- END IGUAZIO CONFIG ---" >> ${HOME}/.bashrc
    fi

    if [ "$(grep --count 'KUBECTL AUTOCOMPLETION' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- KUBECTL AUTOCOMPLETION -----" >> ${HOME}/.bashrc
      echo "if [ -f /etc/bash_completion ]; then" >> ${HOME}/.bashrc
      echo " . /etc/bash_completion" >> ${HOME}/.bashrc
      echo "fi" >> ${HOME}/.bashrc
      echo "if type -t _get_comp_words_by_ref > /dev/null 2>&1 && command -v kubectl > /dev/null 2>&1; then" >> ${HOME}/.bashrc
      echo " source <(kubectl completion bash)" >> ${HOME}/.bashrc
      echo "fi" >> ${HOME}/.bashrc
      echo "# ----- END KUBECTL AUTOCOMPLETION -----" >> ${HOME}/.bashrc
    fi

    if [ ! -e "${HOME}/.condarc" ]; then
      conda config --set always_softlink False
      conda config --set always_copy True
      conda config --add envs_dirs ${HOME}/.conda/envs
      conda init bash 2>&1
      mkdir -p ${HOME}/.conda/envs
    fi

    echo "source ${HOME}/.bashrc" > ${HOME}/.bash_profile

    touch ${HOME}/.viminfo
    chmod a+w ${HOME}/.viminfo
    echo ":set term=builtin_ansi" > ${HOME}/.vimrc

    PIP_USER_PROFILE="{{ .Values.pip.profile }}"

    if [ "${PIP_USER_PROFILE}" == "" ]; then
      PIP_USER_PATH="${HOME}/.pythonlibs"
    else
      PIP_USER_PATH="${HOME}/.pythonlibs/${PIP_USER_PROFILE}"
    fi
    mkdir -p ${PIP_USER_PATH}
    export IGZ_ORIG_PIP_PREFIX="${PIP_USER_PATH}"
    export IGZ_ORIG_PYTHONPATH="${PIP_USER_PATH}/lib/python3.7/site-packages:${PYTHONPATH}"
    export PATH="${PATH}:${PIP_USER_PATH}/bin"

    if [ "$(grep --count 'JUPYTER TERMINAL PATH SUPPORT' ${HOME}/.bashrc)" == "0" ]; then
      echo "# ----- JUPYTER TERMINAL PATH SUPPORT -----" >> ${HOME}/.bashrc
      echo "if [ ! -z JUPYTER_SERVER_ROOT ]; then" >> ${HOME}/.bashrc
      echo " export PATH=${PATH}" >> ${HOME}/.bashrc
      echo "fi" >> ${HOME}/.bashrc
      echo "# ----- END JUPYTER TERMINAL PATH SUPPORT -----" >> ${HOME}/.bashrc
    fi

    unset PYTHONPATH

    source activate base

    if [ -e "${HOME}/.igz/startup-hook.sh" ]; then
        ${HOME}/.igz/startup-hook.sh || true
    fi

    jupyter-notebook $@
