# Copyright 2017 Iguazio
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "grafana.fullname" . }}
  namespace: {{ template "grafana.namespace" . }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
{{- if .Values.plugins }}
  plugins: {{ join "," .Values.plugins }}
{{- end }}
  grafana.ini: |
{{- range $key, $value := index .Values "grafana.ini" }}
    [{{ $key }}]
    {{- range $elem, $elemVal := $value }}
    {{ $elem }} = {{ $elemVal }}
    {{- end }}
{{- end }}

{{- if .Values.datasources }}
{{ $root := . }}
  {{- range $key, $value := .Values.datasources }}
  {{ $key }}: |
{{ tpl (toYaml $value | indent 4) $root }}
  {{- end -}}
{{- end -}}

{{- if .Values.notifiers }}
  {{- range $key, $value := .Values.notifiers }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboardProviders }}
  {{- range $key, $value := .Values.dashboardProviders }}
  {{ $key }}: |
{{ toYaml $value | indent 4 }}
  {{- end -}}
{{- end -}}

{{- if .Values.dashboards  }}
  download_dashboards.sh: |
    #!/usr/bin/env sh
    set -euf
    {{- if .Values.dashboardProviders }}
      {{- range $key, $value := .Values.dashboardProviders }}
        {{- range $value.providers }}
    mkdir -p {{ .options.path }}
        {{- end }}
      {{- end }}
    {{- end }}

  {{- range $provider, $dashboards := .Values.dashboards }}
    {{- range $key, $value := $dashboards }}
      {{- if (or (hasKey $value "gnetId") (hasKey $value "url")) }}
    curl -skf \
    --connect-timeout 60 \
    --max-time 60 \
      {{- if not $value.b64content }}
    -H "Accept: application/json" \
    -H "Content-Type: application/json;charset=UTF-8" \
      {{ end }}
    {{- if $value.url -}}{{ $value.url }}{{- else -}} https://grafana.com/api/dashboards/{{ $value.gnetId }}/revisions/{{- if $value.revision -}}{{ $value.revision }}{{- else -}}1{{- end -}}/download{{- end -}}{{ if $value.datasource }}| sed 's|\"datasource\":[^,]*|\"datasource\": \"{{ $value.datasource }}\"|g'{{ end }}{{- if $value.b64content -}} | base64 -d {{- end -}} \
    > /var/lib/grafana/dashboards/{{ $provider }}/{{ $key }}.json
      {{- end -}}
    {{- end }}
  {{- end }}
{{- end }}

  rm_obsolete_provisioned_dashboards.sh: |
    #!/usr/bin/env sh
    set -x
    cd /var/lib/grafana/dashboards

    # Exit if the directory isn't found.
    if [[ $? -gt 0 ]]; then
        echo "Can't find work dir... exiting"
        exit
    fi
  {{- if .Values.dashboardProviders }}
    {{- range $_, $providersData := .Values.dashboardProviders }}
      {{- range $_, $providerData := $providersData.providers }}
    cd /var/lib/grafana/dashboards/{{ $providerData.folder }}

        {{- if $.Values.dashboards }}
          {{- range $provider, $dashboards := $.Values.dashboards }}
            {{- if eq $provider $providerData.name }}
    DashboardNamesString=",
              {{- range $dashboardName, $_ := $dashboards}}
                  {{- $dashboardName -}}.json,
              {{- end -}}"
        {{- else }}
    DashboardNamesString=""
            {{- end }}
          {{- end }}
        {{- end }}


    # Check only if the directory found.
    if [[ $? -eq 0 ]]; then
      if [ -z "$(ls -A .)" ]; then
        echo "Empty folder, no dashboard files to delete"
      else
        for i in *; do
          case "$DashboardNamesString" in
            *,$i,*)
              echo "Not Deleting dashboard file: $i"
              ;;
            *)
              echo "Deleting dashboard file: $i"
              rm "$i"
              ;;
          esac
        done
      fi
    fi

      {{- end }}
    {{- end }}
  {{- end }}
